
UARTProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08005fa0  08005fa0  00006fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e4  080061e4  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061e4  080061e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061ec  080061ec  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ec  080061ec  000071ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061f0  080061f0  000071f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080061f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  2000005c  08006250  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08006250  0000885c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001300b  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4b  00000000  00000000  0001b097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  0001ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dad  00000000  00000000  0001fabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014984  00000000  00000000  00040868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6531  00000000  00000000  000551ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b71d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0011b760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00120760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f88 	.word	0x08005f88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005f88 	.word	0x08005f88

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <LED_GREEN_RESP>:
static const char INVERT[]="INVERT";

static const char RESP[]="UNDERSTOOD\n";


void LED_GREEN_RESP(UART_HandleTypeDef* UART){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000614:	2101      	movs	r1, #1
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <LED_GREEN_RESP+0x24>)
 8000618:	f001 fcb5 	bl	8001f86 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(UART,&RESP,strlen(RESP),5);
 800061c:	2305      	movs	r3, #5
 800061e:	220b      	movs	r2, #11
 8000620:	4904      	ldr	r1, [pc, #16]	@ (8000634 <LED_GREEN_RESP+0x28>)
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f003 fc0a 	bl	8003e3c <HAL_UART_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40020400 	.word	0x40020400
 8000634:	0800608c 	.word	0x0800608c

08000638 <LED_BLUE_RESP>:

void LED_BLUE_RESP(UART_HandleTypeDef* UART)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <LED_BLUE_RESP+0x24>)
 8000644:	f001 fc9f 	bl	8001f86 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(UART,&RESP,strlen(RESP),5);
 8000648:	2305      	movs	r3, #5
 800064a:	220b      	movs	r2, #11
 800064c:	4904      	ldr	r1, [pc, #16]	@ (8000660 <LED_BLUE_RESP+0x28>)
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f003 fbf4 	bl	8003e3c <HAL_UART_Transmit>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400
 8000660:	0800608c 	.word	0x0800608c

08000664 <LED_RED_RESP>:

void LED_RED_RESP(UART_HandleTypeDef* UART)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800066c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <LED_RED_RESP+0x28>)
 8000672:	f001 fc88 	bl	8001f86 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(UART,&RESP,strlen(RESP),5);
 8000676:	2305      	movs	r3, #5
 8000678:	220b      	movs	r2, #11
 800067a:	4905      	ldr	r1, [pc, #20]	@ (8000690 <LED_RED_RESP+0x2c>)
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f003 fbdd 	bl	8003e3c <HAL_UART_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020400 	.word	0x40020400
 8000690:	0800608c 	.word	0x0800608c

08000694 <RNG_CALL_RESP>:
void RNG_CALL_RESP(UART_HandleTypeDef* UART,int number,RNG_HandleTypeDef* hrng)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	uint32_t result;
	char response[64];
	HAL_RNG_GenerateRandomNumber(hrng,&result);
 80006a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a4:	4619      	mov	r1, r3
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f002 fc5e 	bl	8002f68 <HAL_RNG_GenerateRandomNumber>
	result=result%number;
 80006ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80006b4:	fb01 f202 	mul.w	r2, r1, r2
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	657b      	str	r3, [r7, #84]	@ 0x54
	result++;
 80006bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006be:	3301      	adds	r3, #1
 80006c0:	657b      	str	r3, [r7, #84]	@ 0x54
	sprintf(&response,"RNG is %lu\n",result);
 80006c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4914      	ldr	r1, [pc, #80]	@ (800071c <RNG_CALL_RESP+0x88>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 ff9c 	bl	8005608 <siprintf>
	if (result==number) sprintf(&response,"RNG is %lu, Wow lucky!!\n",result);
 80006d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d106      	bne.n	80006e6 <RNG_CALL_RESP+0x52>
 80006d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4910      	ldr	r1, [pc, #64]	@ (8000720 <RNG_CALL_RESP+0x8c>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 ff91 	bl	8005608 <siprintf>
	if (result==1) sprintf(&response,"RNG is %lu. That's rough.\n",result);
 80006e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d106      	bne.n	80006fa <RNG_CALL_RESP+0x66>
 80006ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	490c      	ldr	r1, [pc, #48]	@ (8000724 <RNG_CALL_RESP+0x90>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 ff87 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd90 	bl	8000224 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	f107 0114 	add.w	r1, r7, #20
 800070c:	2305      	movs	r3, #5
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f003 fb94 	bl	8003e3c <HAL_UART_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	@ 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08005fa0 	.word	0x08005fa0
 8000720:	08005fac 	.word	0x08005fac
 8000724:	08005fc8 	.word	0x08005fc8

08000728 <PARTY_MODE_CHANGE>:

void PARTY_MODE_CHANGE(UART_HandleTypeDef* UART,int *MODE)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b092      	sub	sp, #72	@ 0x48
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	*MODE=PARTY_MODE;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	490a      	ldr	r1, [pc, #40]	@ (800076c <PARTY_MODE_CHANGE+0x44>)
 8000742:	4618      	mov	r0, r3
 8000744:	f004 ff60 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd69 	bl	8000224 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f107 0108 	add.w	r1, r7, #8
 800075a:	2305      	movs	r3, #5
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f003 fb6d 	bl	8003e3c <HAL_UART_Transmit>
}
 8000762:	bf00      	nop
 8000764:	3748      	adds	r7, #72	@ 0x48
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	08005fe4 	.word	0x08005fe4

08000770 <COUNTING_MODE_CHANGE>:

void COUNTING_MODE_CHANGE(UART_HandleTypeDef* UART,int *MODE)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b092      	sub	sp, #72	@ 0x48
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	*MODE=COUNTING_MODE;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2202      	movs	r2, #2
 800077e:	601a      	str	r2, [r3, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	490a      	ldr	r1, [pc, #40]	@ (80007b4 <COUNTING_MODE_CHANGE+0x44>)
 800078a:	4618      	mov	r0, r3
 800078c:	f004 ff3c 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fd45 	bl	8000224 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	f107 0108 	add.w	r1, r7, #8
 80007a2:	2305      	movs	r3, #5
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f003 fb49 	bl	8003e3c <HAL_UART_Transmit>
}
 80007aa:	bf00      	nop
 80007ac:	3748      	adds	r7, #72	@ 0x48
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	08005fe4 	.word	0x08005fe4

080007b8 <COUNTING_DOWN_MODE_CHANGE>:

void COUNTING_DOWN_MODE_CHANGE(UART_HandleTypeDef* UART,int *MODE)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b092      	sub	sp, #72	@ 0x48
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	*MODE=COUNTING_DOWN_MODE;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2203      	movs	r2, #3
 80007c6:	601a      	str	r2, [r3, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	490a      	ldr	r1, [pc, #40]	@ (80007fc <COUNTING_DOWN_MODE_CHANGE+0x44>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 ff18 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd21 	bl	8000224 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	f107 0108 	add.w	r1, r7, #8
 80007ea:	2305      	movs	r3, #5
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f003 fb25 	bl	8003e3c <HAL_UART_Transmit>
}
 80007f2:	bf00      	nop
 80007f4:	3748      	adds	r7, #72	@ 0x48
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08005fe4 	.word	0x08005fe4

08000800 <NORMAL_MODE_CHANGE>:

void NORMAL_MODE_CHANGE(UART_HandleTypeDef* UART,int *MODE)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	@ 0x48
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	*MODE=MAIN_MODE;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	490a      	ldr	r1, [pc, #40]	@ (8000844 <NORMAL_MODE_CHANGE+0x44>)
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fef4 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcfd 	bl	8000224 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	f107 0108 	add.w	r1, r7, #8
 8000832:	2305      	movs	r3, #5
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f003 fb01 	bl	8003e3c <HAL_UART_Transmit>
}
 800083a:	bf00      	nop
 800083c:	3748      	adds	r7, #72	@ 0x48
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	08005fe4 	.word	0x08005fe4

08000848 <WAVE_MODE_CHANGE>:
void WAVE_MODE_CHANGE(UART_HandleTypeDef* UART,int *MODE)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b092      	sub	sp, #72	@ 0x48
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	*MODE=WAVE_MODE;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	2204      	movs	r2, #4
 8000856:	601a      	str	r2, [r3, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	490a      	ldr	r1, [pc, #40]	@ (800088c <WAVE_MODE_CHANGE+0x44>)
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fed0 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fcd9 	bl	8000224 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f107 0108 	add.w	r1, r7, #8
 800087a:	2305      	movs	r3, #5
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f003 fadd 	bl	8003e3c <HAL_UART_Transmit>
}
 8000882:	bf00      	nop
 8000884:	3748      	adds	r7, #72	@ 0x48
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08005fe4 	.word	0x08005fe4

08000890 <INVERT_MODE_CHANGE>:
void INVERT_MODE_CHANGE(UART_HandleTypeDef* UART,int *MODE)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b092      	sub	sp, #72	@ 0x48
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	*MODE=INVERT_MODE;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2205      	movs	r2, #5
 800089e:	601a      	str	r2, [r3, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	490a      	ldr	r1, [pc, #40]	@ (80008d4 <INVERT_MODE_CHANGE+0x44>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 feac 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcb5 	bl	8000224 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0108 	add.w	r1, r7, #8
 80008c2:	2305      	movs	r3, #5
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f003 fab9 	bl	8003e3c <HAL_UART_Transmit>
}
 80008ca:	bf00      	nop
 80008cc:	3748      	adds	r7, #72	@ 0x48
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08005fe4 	.word	0x08005fe4

080008d8 <SEND_CURRENT_MODE>:
	HAL_UART_Transmit(UART,&response,strlen(response),5);
}


void SEND_CURRENT_MODE(UART_HandleTypeDef* UART,int *MODE)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b092      	sub	sp, #72	@ 0x48
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	char response[64];
	sprintf(&response,"MODE is %i\n",*MODE);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	490a      	ldr	r1, [pc, #40]	@ (8000914 <SEND_CURRENT_MODE+0x3c>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fe8b 	bl	8005608 <siprintf>
	HAL_UART_Transmit(UART,&response,strlen(response),5);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc94 	bl	8000224 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f107 0108 	add.w	r1, r7, #8
 8000904:	2305      	movs	r3, #5
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f003 fa98 	bl	8003e3c <HAL_UART_Transmit>
}
 800090c:	bf00      	nop
 800090e:	3748      	adds	r7, #72	@ 0x48
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08005fe4 	.word	0x08005fe4

08000918 <execute_command>:

void execute_command(char* command[],UART_HandleTypeDef * UARTHANDLE, RNG_HandleTypeDef* hrng,int *mode)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	603b      	str	r3, [r7, #0]
		if (strcmp(LED_RED,command)==0) LED_RED_RESP(UARTHANDLE);
 8000926:	68f9      	ldr	r1, [r7, #12]
 8000928:	484e      	ldr	r0, [pc, #312]	@ (8000a64 <execute_command+0x14c>)
 800092a:	f7ff fc71 	bl	8000210 <strcmp>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d103      	bne.n	800093c <execute_command+0x24>
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f7ff fe95 	bl	8000664 <LED_RED_RESP>
		else if (strcmp(WAVE,command)==0) WAVE_MODE_CHANGE(UARTHANDLE,mode);
		else if(strcmp(INVERT,command)==0) INVERT_MODE_CHANGE(UARTHANDLE,mode);
		else if(strcmp(GET_MODE,command)==0) SEND_CURRENT_MODE(UARTHANDLE,mode);
		else HAL_UART_Transmit(UARTHANDLE,command,strlen(command),5);

}
 800093a:	e08f      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(LED_BLUE,command)==0) LED_BLUE_RESP(UARTHANDLE);
 800093c:	68f9      	ldr	r1, [r7, #12]
 800093e:	484a      	ldr	r0, [pc, #296]	@ (8000a68 <execute_command+0x150>)
 8000940:	f7ff fc66 	bl	8000210 <strcmp>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <execute_command+0x3a>
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f7ff fe74 	bl	8000638 <LED_BLUE_RESP>
}
 8000950:	e084      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(LED_GREEN,command)==0) LED_GREEN_RESP(UARTHANDLE);
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	4845      	ldr	r0, [pc, #276]	@ (8000a6c <execute_command+0x154>)
 8000956:	f7ff fc5b 	bl	8000210 <strcmp>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d103      	bne.n	8000968 <execute_command+0x50>
 8000960:	68b8      	ldr	r0, [r7, #8]
 8000962:	f7ff fe53 	bl	800060c <LED_GREEN_RESP>
}
 8000966:	e079      	b.n	8000a5c <execute_command+0x144>
		else if (strncmp(RNG_CALL,command,strlen(RNG_CALL))==0)
 8000968:	2204      	movs	r2, #4
 800096a:	68f9      	ldr	r1, [r7, #12]
 800096c:	4840      	ldr	r0, [pc, #256]	@ (8000a70 <execute_command+0x158>)
 800096e:	f004 fe82 	bl	8005676 <strncmp>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d113      	bne.n	80009a0 <execute_command+0x88>
			ptr=strchr(command,':');
 8000978:	213a      	movs	r1, #58	@ 0x3a
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f004 fe6e 	bl	800565c <strchr>
 8000980:	6178      	str	r0, [r7, #20]
			ptr++;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
			uint32_t number=atoi(ptr);
 8000988:	6978      	ldr	r0, [r7, #20]
 800098a:	f004 fdb5 	bl	80054f8 <atoi>
 800098e:	4603      	mov	r3, r0
 8000990:	613b      	str	r3, [r7, #16]
			RNG_CALL_RESP(UARTHANDLE,number,hrng);
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4619      	mov	r1, r3
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff fe7b 	bl	8000694 <RNG_CALL_RESP>
}
 800099e:	e05d      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(PARTY_TIME,command)==0) PARTY_MODE_CHANGE(UARTHANDLE,mode);
 80009a0:	68f9      	ldr	r1, [r7, #12]
 80009a2:	4834      	ldr	r0, [pc, #208]	@ (8000a74 <execute_command+0x15c>)
 80009a4:	f7ff fc34 	bl	8000210 <strcmp>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d104      	bne.n	80009b8 <execute_command+0xa0>
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	68b8      	ldr	r0, [r7, #8]
 80009b2:	f7ff feb9 	bl	8000728 <PARTY_MODE_CHANGE>
}
 80009b6:	e051      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(COUNTING,command)==0) COUNTING_MODE_CHANGE(UARTHANDLE,mode);
 80009b8:	68f9      	ldr	r1, [r7, #12]
 80009ba:	482f      	ldr	r0, [pc, #188]	@ (8000a78 <execute_command+0x160>)
 80009bc:	f7ff fc28 	bl	8000210 <strcmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <execute_command+0xb8>
 80009c6:	6839      	ldr	r1, [r7, #0]
 80009c8:	68b8      	ldr	r0, [r7, #8]
 80009ca:	f7ff fed1 	bl	8000770 <COUNTING_MODE_CHANGE>
}
 80009ce:	e045      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(RETURN,command)==0) NORMAL_MODE_CHANGE(UARTHANDLE,mode);
 80009d0:	68f9      	ldr	r1, [r7, #12]
 80009d2:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <execute_command+0x164>)
 80009d4:	f7ff fc1c 	bl	8000210 <strcmp>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d104      	bne.n	80009e8 <execute_command+0xd0>
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	68b8      	ldr	r0, [r7, #8]
 80009e2:	f7ff ff0d 	bl	8000800 <NORMAL_MODE_CHANGE>
}
 80009e6:	e039      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(COUNTING_DOWN,command)==0) COUNTING_DOWN_MODE_CHANGE(UARTHANDLE,mode);
 80009e8:	68f9      	ldr	r1, [r7, #12]
 80009ea:	4825      	ldr	r0, [pc, #148]	@ (8000a80 <execute_command+0x168>)
 80009ec:	f7ff fc10 	bl	8000210 <strcmp>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d104      	bne.n	8000a00 <execute_command+0xe8>
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	68b8      	ldr	r0, [r7, #8]
 80009fa:	f7ff fedd 	bl	80007b8 <COUNTING_DOWN_MODE_CHANGE>
}
 80009fe:	e02d      	b.n	8000a5c <execute_command+0x144>
		else if (strcmp(WAVE,command)==0) WAVE_MODE_CHANGE(UARTHANDLE,mode);
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	4820      	ldr	r0, [pc, #128]	@ (8000a84 <execute_command+0x16c>)
 8000a04:	f7ff fc04 	bl	8000210 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d104      	bne.n	8000a18 <execute_command+0x100>
 8000a0e:	6839      	ldr	r1, [r7, #0]
 8000a10:	68b8      	ldr	r0, [r7, #8]
 8000a12:	f7ff ff19 	bl	8000848 <WAVE_MODE_CHANGE>
}
 8000a16:	e021      	b.n	8000a5c <execute_command+0x144>
		else if(strcmp(INVERT,command)==0) INVERT_MODE_CHANGE(UARTHANDLE,mode);
 8000a18:	68f9      	ldr	r1, [r7, #12]
 8000a1a:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <execute_command+0x170>)
 8000a1c:	f7ff fbf8 	bl	8000210 <strcmp>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d104      	bne.n	8000a30 <execute_command+0x118>
 8000a26:	6839      	ldr	r1, [r7, #0]
 8000a28:	68b8      	ldr	r0, [r7, #8]
 8000a2a:	f7ff ff31 	bl	8000890 <INVERT_MODE_CHANGE>
}
 8000a2e:	e015      	b.n	8000a5c <execute_command+0x144>
		else if(strcmp(GET_MODE,command)==0) SEND_CURRENT_MODE(UARTHANDLE,mode);
 8000a30:	68f9      	ldr	r1, [r7, #12]
 8000a32:	4816      	ldr	r0, [pc, #88]	@ (8000a8c <execute_command+0x174>)
 8000a34:	f7ff fbec 	bl	8000210 <strcmp>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d104      	bne.n	8000a48 <execute_command+0x130>
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f7ff ff49 	bl	80008d8 <SEND_CURRENT_MODE>
}
 8000a46:	e009      	b.n	8000a5c <execute_command+0x144>
		else HAL_UART_Transmit(UARTHANDLE,command,strlen(command),5);
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fbeb 	bl	8000224 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	2305      	movs	r3, #5
 8000a54:	68f9      	ldr	r1, [r7, #12]
 8000a56:	68b8      	ldr	r0, [r7, #8]
 8000a58:	f003 f9f0 	bl	8003e3c <HAL_UART_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08006020 	.word	0x08006020
 8000a68:	08006028 	.word	0x08006028
 8000a6c:	08006034 	.word	0x08006034
 8000a70:	08006040 	.word	0x08006040
 8000a74:	08006048 	.word	0x08006048
 8000a78:	08006050 	.word	0x08006050
 8000a7c:	08006070 	.word	0x08006070
 8000a80:	0800605c 	.word	0x0800605c
 8000a84:	08006068 	.word	0x08006068
 8000a88:	08006084 	.word	0x08006084
 8000a8c:	08006078 	.word	0x08006078

08000a90 <PARTY_TICK>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PARTY_TICK(int timeDelta)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if (timeDelta>250)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2bfa      	cmp	r3, #250	@ 0xfa
 8000a9c:	dd0a      	ble.n	8000ab4 <PARTY_TICK+0x24>
	{
		HAL_RNG_GenerateRandomNumber(&hrng,&counter);
 8000a9e:	4907      	ldr	r1, [pc, #28]	@ (8000abc <PARTY_TICK+0x2c>)
 8000aa0:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <PARTY_TICK+0x30>)
 8000aa2:	f002 fa61 	bl	8002f68 <HAL_RNG_GenerateRandomNumber>
		time_since_change=HAL_GetTick();
 8000aa6:	f000 feed 	bl	8001884 <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <PARTY_TICK+0x34>)
 8000ab0:	601a      	str	r2, [r3, #0]
	}
	return;
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
}
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200006fc 	.word	0x200006fc
 8000ac0:	20000078 	.word	0x20000078
 8000ac4:	20000700 	.word	0x20000700

08000ac8 <COUNTING_TICK>:
void COUNTING_TICK(int timeDelta)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	if (timeDelta>1000)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ad6:	dd1c      	ble.n	8000b12 <COUNTING_TICK+0x4a>
	{
		if (MODE==COUNTING_MODE) counter++;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <COUNTING_TICK+0x54>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d105      	bne.n	8000aec <COUNTING_TICK+0x24>
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <COUNTING_TICK+0x58>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <COUNTING_TICK+0x58>)
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e004      	b.n	8000af6 <COUNTING_TICK+0x2e>
		else counter--;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <COUNTING_TICK+0x58>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <COUNTING_TICK+0x58>)
 8000af4:	6013      	str	r3, [r2, #0]
		time_since_change=HAL_GetTick();
 8000af6:	f000 fec5 	bl	8001884 <HAL_GetTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <COUNTING_TICK+0x5c>)
 8000b00:	601a      	str	r2, [r3, #0]
		sprintf(&buf,"Counter is %lu\n",counter);
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <COUNTING_TICK+0x58>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <COUNTING_TICK+0x60>)
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <COUNTING_TICK+0x64>)
 8000b0c:	f004 fd7c 	bl	8005608 <siprintf>
}
	return;
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
}
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000708 	.word	0x20000708
 8000b20:	200006fc 	.word	0x200006fc
 8000b24:	20000700 	.word	0x20000700
 8000b28:	08005ff0 	.word	0x08005ff0
 8000b2c:	200005fc 	.word	0x200005fc

08000b30 <WAVE_TICK>:

void WAVE_TICK(int timeDelta)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if (timeDelta>250)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2bfa      	cmp	r3, #250	@ 0xfa
 8000b3c:	dd24      	ble.n	8000b88 <WAVE_TICK+0x58>
	{
		switch(counter%8)
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <WAVE_TICK+0x60>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d010      	beq.n	8000b6c <WAVE_TICK+0x3c>
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d812      	bhi.n	8000b74 <WAVE_TICK+0x44>
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d002      	beq.n	8000b58 <WAVE_TICK+0x28>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d006      	beq.n	8000b64 <WAVE_TICK+0x34>
 8000b56:	e00d      	b.n	8000b74 <WAVE_TICK+0x44>
		{
		case 1:
			counter++;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <WAVE_TICK+0x60>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <WAVE_TICK+0x60>)
 8000b60:	6013      	str	r3, [r2, #0]
			break;
 8000b62:	e00b      	b.n	8000b7c <WAVE_TICK+0x4c>
		case 2:
			counter=4;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <WAVE_TICK+0x60>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	601a      	str	r2, [r3, #0]
			break;
 8000b6a:	e007      	b.n	8000b7c <WAVE_TICK+0x4c>
		case 4:
			counter=1;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <WAVE_TICK+0x60>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
			break;
 8000b72:	e003      	b.n	8000b7c <WAVE_TICK+0x4c>
		default:
			counter=1;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <WAVE_TICK+0x60>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
			break;
 8000b7a:	bf00      	nop

		}
	time_since_change=HAL_GetTick();
 8000b7c:	f000 fe82 	bl	8001884 <HAL_GetTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <WAVE_TICK+0x64>)
 8000b86:	601a      	str	r2, [r3, #0]
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200006fc 	.word	0x200006fc
 8000b94:	20000700 	.word	0x20000700

08000b98 <INVERT_TICK>:

void INVERT_TICK(int timeDelta)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	if (timeDelta>250)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2bfa      	cmp	r3, #250	@ 0xfa
 8000ba4:	dd0a      	ble.n	8000bbc <INVERT_TICK+0x24>
	{
	counter=~counter;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <INVERT_TICK+0x2c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <INVERT_TICK+0x2c>)
 8000bae:	6013      	str	r3, [r2, #0]
	time_since_change=HAL_GetTick();
 8000bb0:	f000 fe68 	bl	8001884 <HAL_GetTick>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <INVERT_TICK+0x30>)
 8000bba:	601a      	str	r2, [r3, #0]
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200006fc 	.word	0x200006fc
 8000bc8:	20000700 	.word	0x20000700

08000bcc <IDLE_CHECK>:
void IDLE_CHECK(int timeDelta)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (timeDelta>60000)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	dd09      	ble.n	8000bf2 <IDLE_CHECK+0x26>
	{
		time_since_change=HAL_GetTick();
 8000bde:	f000 fe51 	bl	8001884 <HAL_GetTick>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <IDLE_CHECK+0x30>)
 8000be8:	601a      	str	r2, [r3, #0]
		sprintf(&buf,"Hello?\n");
 8000bea:	4905      	ldr	r1, [pc, #20]	@ (8000c00 <IDLE_CHECK+0x34>)
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <IDLE_CHECK+0x38>)
 8000bee:	f004 fd0b 	bl	8005608 <siprintf>
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000700 	.word	0x20000700
 8000c00:	08006000 	.word	0x08006000
 8000c04:	200005fc 	.word	0x200005fc

08000c08 <SINE_WAVE_TICK>:
void SINE_WAVE_TICK(int timeDelta)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if (timeDelta>10000)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c16:	4293      	cmp	r3, r2
 8000c18:	dd09      	ble.n	8000c2e <SINE_WAVE_TICK+0x26>
		{
			time_since_change=HAL_GetTick();
 8000c1a:	f000 fe33 	bl	8001884 <HAL_GetTick>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <SINE_WAVE_TICK+0x30>)
 8000c24:	601a      	str	r2, [r3, #0]
			sprintf(&buf,"It's not done yet!!!\n");
 8000c26:	4905      	ldr	r1, [pc, #20]	@ (8000c3c <SINE_WAVE_TICK+0x34>)
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <SINE_WAVE_TICK+0x38>)
 8000c2a:	f004 fced 	bl	8005608 <siprintf>
		}
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000700 	.word	0x20000700
 8000c3c:	08006008 	.word	0x08006008
 8000c40:	200005fc 	.word	0x200005fc

08000c44 <UI_CHANGE>:

void UI_CHANGE()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3,&buf,strlen(&buf),5);
 8000c48:	4859      	ldr	r0, [pc, #356]	@ (8000db0 <UI_CHANGE+0x16c>)
 8000c4a:	f7ff faeb 	bl	8000224 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	2305      	movs	r3, #5
 8000c54:	4956      	ldr	r1, [pc, #344]	@ (8000db0 <UI_CHANGE+0x16c>)
 8000c56:	4857      	ldr	r0, [pc, #348]	@ (8000db4 <UI_CHANGE+0x170>)
 8000c58:	f003 f8f0 	bl	8003e3c <HAL_UART_Transmit>
	if (MODE!=MAIN_MODE) switch(counter%8)
 8000c5c:	4b56      	ldr	r3, [pc, #344]	@ (8000db8 <UI_CHANGE+0x174>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 80a3 	beq.w	8000dac <UI_CHANGE+0x168>
 8000c66:	4b55      	ldr	r3, [pc, #340]	@ (8000dbc <UI_CHANGE+0x178>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	f200 809c 	bhi.w	8000dac <UI_CHANGE+0x168>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <UI_CHANGE+0x38>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000c9d 	.word	0x08000c9d
 8000c80:	08000cbf 	.word	0x08000cbf
 8000c84:	08000ce1 	.word	0x08000ce1
 8000c88:	08000d03 	.word	0x08000d03
 8000c8c:	08000d25 	.word	0x08000d25
 8000c90:	08000d47 	.word	0x08000d47
 8000c94:	08000d69 	.word	0x08000d69
 8000c98:	08000d8b 	.word	0x08000d8b
	{
	case 0:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4847      	ldr	r0, [pc, #284]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000ca2:	f001 f957 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	4845      	ldr	r0, [pc, #276]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cac:	f001 f952 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cb6:	4842      	ldr	r0, [pc, #264]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cb8:	f001 f94c 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000cbc:	e076      	b.n	8000dac <UI_CHANGE+0x168>
	case 1:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	483f      	ldr	r0, [pc, #252]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cc4:	f001 f946 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	483c      	ldr	r0, [pc, #240]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cce:	f001 f941 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cd8:	4839      	ldr	r0, [pc, #228]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cda:	f001 f93b 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000cde:	e065      	b.n	8000dac <UI_CHANGE+0x168>
	case 2:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4836      	ldr	r0, [pc, #216]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000ce6:	f001 f935 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2180      	movs	r1, #128	@ 0x80
 8000cee:	4834      	ldr	r0, [pc, #208]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cf0:	f001 f930 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cfa:	4831      	ldr	r0, [pc, #196]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000cfc:	f001 f92a 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000d00:	e054      	b.n	8000dac <UI_CHANGE+0x168>
	case 3:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2101      	movs	r1, #1
 8000d06:	482e      	ldr	r0, [pc, #184]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d08:	f001 f924 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2180      	movs	r1, #128	@ 0x80
 8000d10:	482b      	ldr	r0, [pc, #172]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d12:	f001 f91f 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d1c:	4828      	ldr	r0, [pc, #160]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d1e:	f001 f919 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000d22:	e043      	b.n	8000dac <UI_CHANGE+0x168>
	case 4:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	4825      	ldr	r0, [pc, #148]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d2a:	f001 f913 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	4823      	ldr	r0, [pc, #140]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d34:	f001 f90e 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d3e:	4820      	ldr	r0, [pc, #128]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d40:	f001 f908 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000d44:	e032      	b.n	8000dac <UI_CHANGE+0x168>
	case 5:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2101      	movs	r1, #1
 8000d4a:	481d      	ldr	r0, [pc, #116]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d4c:	f001 f902 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2180      	movs	r1, #128	@ 0x80
 8000d54:	481a      	ldr	r0, [pc, #104]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d56:	f001 f8fd 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d60:	4817      	ldr	r0, [pc, #92]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d62:	f001 f8f7 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000d66:	e021      	b.n	8000dac <UI_CHANGE+0x168>
	case 6:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d6e:	f001 f8f1 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	4812      	ldr	r0, [pc, #72]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d78:	f001 f8ec 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d82:	480f      	ldr	r0, [pc, #60]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d84:	f001 f8e6 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000d88:	e010      	b.n	8000dac <UI_CHANGE+0x168>
	case 7:
		HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d90:	f001 f8e0 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000d9a:	f001 f8db 	bl	8001f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <UI_CHANGE+0x17c>)
 8000da6:	f001 f8d5 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000daa:	bf00      	nop
	}
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200005fc 	.word	0x200005fc
 8000db4:	200000d0 	.word	0x200000d0
 8000db8:	20000708 	.word	0x20000708
 8000dbc:	200006fc 	.word	0x200006fc
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fcf5 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f87d 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f000 fa0d 	bl	80011f0 <MX_GPIO_Init>
  MX_RNG_Init();
 8000dd6:	f000 f8e5 	bl	8000fa4 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8000dda:	f000 f9af 	bl	800113c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dde:	f000 f9d7 	bl	8001190 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000de2:	f000 f8f3 	bl	8000fcc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MODE=0;
 8000de6:	4b32      	ldr	r3, [pc, #200]	@ (8000eb0 <main+0xec>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
  counter=0;
 8000dec:	4b31      	ldr	r3, [pc, #196]	@ (8000eb4 <main+0xf0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  current_time=HAL_GetTick();
 8000df2:	f000 fd47 	bl	8001884 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <main+0xf4>)
 8000dfc:	601a      	str	r2, [r3, #0]
	  int timedelta=current_time-time_since_change;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <main+0xf4>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b2e      	ldr	r3, [pc, #184]	@ (8000ebc <main+0xf8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	607b      	str	r3, [r7, #4]
	  HAL_UART_Receive(&huart3,&buf,BUFFER_SIZE,1);
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e10:	492b      	ldr	r1, [pc, #172]	@ (8000ec0 <main+0xfc>)
 8000e12:	482c      	ldr	r0, [pc, #176]	@ (8000ec4 <main+0x100>)
 8000e14:	f003 f89d 	bl	8003f52 <HAL_UART_Receive>
	  if (strlen(buf)>0)
 8000e18:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <main+0xfc>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <main+0x68>
	  {

	  	execute_command(&buf,&huart3,&hrng,&MODE);
 8000e20:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <main+0xec>)
 8000e22:	4a29      	ldr	r2, [pc, #164]	@ (8000ec8 <main+0x104>)
 8000e24:	4927      	ldr	r1, [pc, #156]	@ (8000ec4 <main+0x100>)
 8000e26:	4826      	ldr	r0, [pc, #152]	@ (8000ec0 <main+0xfc>)
 8000e28:	f7ff fd76 	bl	8000918 <execute_command>
	  }
	  memset(buf,0,BUFFER_SIZE);
 8000e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e30:	2100      	movs	r1, #0
 8000e32:	4823      	ldr	r0, [pc, #140]	@ (8000ec0 <main+0xfc>)
 8000e34:	f004 fc0a 	bl	800564c <memset>

	  switch(MODE)
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <main+0xec>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b06      	cmp	r3, #6
 8000e3e:	d82d      	bhi.n	8000e9c <main+0xd8>
 8000e40:	a201      	add	r2, pc, #4	@ (adr r2, 8000e48 <main+0x84>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e95 	.word	0x08000e95
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e6d 	.word	0x08000e6d
 8000e54:	08000e75 	.word	0x08000e75
 8000e58:	08000e7d 	.word	0x08000e7d
 8000e5c:	08000e85 	.word	0x08000e85
 8000e60:	08000e8d 	.word	0x08000e8d
	  {
	  case PARTY_MODE:
		  PARTY_TICK(timedelta);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fe13 	bl	8000a90 <PARTY_TICK>
	  		break;
 8000e6a:	e017      	b.n	8000e9c <main+0xd8>
	  case COUNTING_MODE:
		  COUNTING_TICK(timedelta);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fe2b 	bl	8000ac8 <COUNTING_TICK>
	  		break;
 8000e72:	e013      	b.n	8000e9c <main+0xd8>
	  case COUNTING_DOWN_MODE:
		  COUNTING_TICK(timedelta);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fe27 	bl	8000ac8 <COUNTING_TICK>
		  break;
 8000e7a:	e00f      	b.n	8000e9c <main+0xd8>
	  case WAVE_MODE:
		  WAVE_TICK(timedelta);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fe57 	bl	8000b30 <WAVE_TICK>
		  break;
 8000e82:	e00b      	b.n	8000e9c <main+0xd8>
	  case INVERT_MODE:
		  INVERT_TICK(timedelta);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fe87 	bl	8000b98 <INVERT_TICK>
		  break;
 8000e8a:	e007      	b.n	8000e9c <main+0xd8>
	  case SINE_WAVE_MODE:
		  SINE_WAVE_TICK(timedelta);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff febb 	bl	8000c08 <SINE_WAVE_TICK>
	  	  break;
 8000e92:	e003      	b.n	8000e9c <main+0xd8>
	  case MAIN_MODE:
		  IDLE_CHECK(timedelta);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fe99 	bl	8000bcc <IDLE_CHECK>
		  break;
 8000e9a:	bf00      	nop
	  }
	  UI_CHANGE();
 8000e9c:	f7ff fed2 	bl	8000c44 <UI_CHANGE>
	  memset(buf,0,BUFFER_SIZE);
 8000ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <main+0xfc>)
 8000ea8:	f004 fbd0 	bl	800564c <memset>
  {
 8000eac:	e7a1      	b.n	8000df2 <main+0x2e>
 8000eae:	bf00      	nop
 8000eb0:	20000708 	.word	0x20000708
 8000eb4:	200006fc 	.word	0x200006fc
 8000eb8:	20000704 	.word	0x20000704
 8000ebc:	20000700 	.word	0x20000700
 8000ec0:	200005fc 	.word	0x200005fc
 8000ec4:	200000d0 	.word	0x200000d0
 8000ec8:	20000078 	.word	0x20000078

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2234      	movs	r2, #52	@ 0x34
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fbb6 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <SystemClock_Config+0xd4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a22      	ldr	r2, [pc, #136]	@ (8000fa0 <SystemClock_Config+0xd4>)
 8000f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <SystemClock_Config+0xd4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f2c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000f40:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fd58 	bl	8002a0c <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f62:	f000 fa01 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	230f      	movs	r3, #15
 8000f68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2103      	movs	r1, #3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 f954 	bl	8002230 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f8e:	f000 f9eb 	bl	8001368 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3750      	adds	r7, #80	@ 0x50
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_RNG_Init+0x20>)
 8000faa:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <MX_RNG_Init+0x24>)
 8000fac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_RNG_Init+0x20>)
 8000fb0:	f001 ffb0 	bl	8002f14 <HAL_RNG_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000fba:	f000 f9d5 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	50060800 	.word	0x50060800

08000fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09a      	sub	sp, #104	@ 0x68
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fe0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fb19 	bl	800564c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101a:	4b46      	ldr	r3, [pc, #280]	@ (8001134 <MX_TIM1_Init+0x168>)
 800101c:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <MX_TIM1_Init+0x16c>)
 800101e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001020:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800102c:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <MX_TIM1_Init+0x168>)
 800102e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001032:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b3f      	ldr	r3, [pc, #252]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <MX_TIM1_Init+0x168>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b3c      	ldr	r3, [pc, #240]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001046:	483b      	ldr	r0, [pc, #236]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001048:	f001 ffe4 	bl	8003014 <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001052:	f000 f989 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001060:	4619      	mov	r1, r3
 8001062:	4834      	ldr	r0, [pc, #208]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001064:	f002 f940 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800106e:	f000 f97b 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001072:	4830      	ldr	r0, [pc, #192]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001074:	f002 f81d 	bl	80030b2 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800107e:	f000 f973 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001082:	2304      	movs	r3, #4
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001086:	2300      	movs	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800108a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800108e:	4619      	mov	r1, r3
 8001090:	4828      	ldr	r0, [pc, #160]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001092:	f002 f9f0 	bl	8003476 <HAL_TIM_SlaveConfigSynchro>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800109c:	f000 f964 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4821      	ldr	r0, [pc, #132]	@ (8001134 <MX_TIM1_Init+0x168>)
 80010b0:	f002 fda6 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80010ba:	f000 f955 	bl	8001368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	@ 0x60
 80010c0:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4814      	ldr	r0, [pc, #80]	@ (8001134 <MX_TIM1_Init+0x168>)
 80010e4:	f002 f83e 	bl	8003164 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80010ee:	f000 f93b 	bl	8001368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001116:	f002 fdef 	bl	8003cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001120:	f000 f922 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001124:	4803      	ldr	r0, [pc, #12]	@ (8001134 <MX_TIM1_Init+0x168>)
 8001126:	f000 f9a3 	bl	8001470 <HAL_TIM_MspPostInit>

}
 800112a:	bf00      	nop
 800112c:	3768      	adds	r7, #104	@ 0x68
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000088 	.word	0x20000088
 8001138:	40010000 	.word	0x40010000

0800113c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <MX_USART3_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART3_UART_Init+0x4c>)
 8001174:	f002 fe12 	bl	8003d9c <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f8f3 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000d0 	.word	0x200000d0
 800118c:	40004800 	.word	0x40004800

08001190 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001196:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800119a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119e:	2206      	movs	r2, #6
 80011a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011da:	f000 feee 	bl	8001fba <HAL_PCD_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80011e4:	f000 f8c0 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000118 	.word	0x20000118

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <MX_GPIO_Init+0x168>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b50      	ldr	r3, [pc, #320]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	4b4c      	ldr	r3, [pc, #304]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <MX_GPIO_Init+0x168>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b49      	ldr	r3, [pc, #292]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b45      	ldr	r3, [pc, #276]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a44      	ldr	r2, [pc, #272]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b3e      	ldr	r3, [pc, #248]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a3d      	ldr	r2, [pc, #244]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <MX_GPIO_Init+0x168>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b37      	ldr	r3, [pc, #220]	@ (8001358 <MX_GPIO_Init+0x168>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a36      	ldr	r2, [pc, #216]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <MX_GPIO_Init+0x168>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a2f      	ldr	r2, [pc, #188]	@ (8001358 <MX_GPIO_Init+0x168>)
 800129c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_GPIO_Init+0x168>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <MX_GPIO_Init+0x168>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <MX_GPIO_Init+0x168>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_GPIO_Init+0x168>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80012d0:	4822      	ldr	r0, [pc, #136]	@ (800135c <MX_GPIO_Init+0x16c>)
 80012d2:	f000 fe3f 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	@ 0x40
 80012da:	4821      	ldr	r0, [pc, #132]	@ (8001360 <MX_GPIO_Init+0x170>)
 80012dc:	f000 fe3a 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	481b      	ldr	r0, [pc, #108]	@ (8001364 <MX_GPIO_Init+0x174>)
 80012f8:	f000 fc98 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012fc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_GPIO_Init+0x16c>)
 8001316:	f000 fc89 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800131a:	2340      	movs	r3, #64	@ 0x40
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	@ (8001360 <MX_GPIO_Init+0x170>)
 8001332:	f000 fc7b 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001336:	2380      	movs	r3, #128	@ 0x80
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_GPIO_Init+0x170>)
 800134a:	f000 fc6f 	bl	8001c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	@ 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	40021800 	.word	0x40021800
 8001364:	40020800 	.word	0x40020800

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <Error_Handler+0x8>

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	6453      	str	r3, [r2, #68]	@ 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b092      	sub	sp, #72	@ 0x48
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	223c      	movs	r2, #60	@ 0x3c
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 f939 	bl	800564c <memset>
  if(hrng->Instance==RNG)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <HAL_RNG_MspInit+0x60>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d11b      	bne.n	800141c <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013e4:	2320      	movs	r3, #32
 80013e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 f93d 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_RNG_MspInit+0x3c>
    {
      Error_Handler();
 80013fc:	f7ff ffb4 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <HAL_RNG_MspInit+0x64>)
 8001406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001408:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_RNG_MspInit+0x64>)
 800140a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800140e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_RNG_MspInit+0x64>)
 8001412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800141c:	bf00      	nop
 800141e:	3748      	adds	r7, #72	@ 0x48
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	50060800 	.word	0x50060800
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_TIM_Base_MspInit+0x3c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10d      	bne.n	800145a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_TIM_Base_MspInit+0x40>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a09      	ldr	r2, [pc, #36]	@ (800146c <HAL_TIM_Base_MspInit+0x40>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <HAL_TIM_Base_MspInit+0x40>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40010000 	.word	0x40010000
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <HAL_TIM_MspPostInit+0x68>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d11e      	bne.n	80014d0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_TIM_MspPostInit+0x6c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_TIM_MspPostInit+0x6c>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_TIM_MspPostInit+0x6c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <HAL_TIM_MspPostInit+0x70>)
 80014cc:	f000 fbae 	bl	8001c2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40010000 	.word	0x40010000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_UART_MspInit+0x94>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d134      	bne.n	8001570 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_UART_MspInit+0x98>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <HAL_UART_MspInit+0x98>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_UART_MspInit+0x98>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800153e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001550:	2307      	movs	r3, #7
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4809      	ldr	r0, [pc, #36]	@ (8001580 <HAL_UART_MspInit+0x9c>)
 800155c:	f000 fb66 	bl	8001c2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2027      	movs	r0, #39	@ 0x27
 8001566:	f000 fa98 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800156a:	2027      	movs	r0, #39	@ 0x27
 800156c:	f000 fab1 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40004800 	.word	0x40004800
 800157c:	40023800 	.word	0x40023800
 8001580:	40020c00 	.word	0x40020c00

08001584 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b098      	sub	sp, #96	@ 0x60
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	223c      	movs	r2, #60	@ 0x3c
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 f851 	bl	800564c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b2:	d14d      	bne.n	8001650 <HAL_PCD_MspInit+0xcc>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015b4:	2320      	movs	r3, #32
 80015b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f855 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80015cc:	f7ff fecc 	bl	8001368 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80015f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015fe:	230a      	movs	r3, #10
 8001600:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001606:	4619      	mov	r1, r3
 8001608:	4814      	ldr	r0, [pc, #80]	@ (800165c <HAL_PCD_MspInit+0xd8>)
 800160a:	f000 fb0f 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800160e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001612:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001620:	4619      	mov	r1, r3
 8001622:	480e      	ldr	r0, [pc, #56]	@ (800165c <HAL_PCD_MspInit+0xd8>)
 8001624:	f000 fb02 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 800162a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 800162e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001632:	6353      	str	r3, [r2, #52]	@ 0x34
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163c:	4a06      	ldr	r2, [pc, #24]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001642:	6453      	str	r3, [r2, #68]	@ 0x44
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <HAL_PCD_MspInit+0xd4>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001650:	bf00      	nop
 8001652:	3760      	adds	r7, #96	@ 0x60
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 f8d1 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <USART3_IRQHandler+0x10>)
 80016c6:	f002 fcdb 	bl	8004080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200000d0 	.word	0x200000d0

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f003 ffca 	bl	800569c <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20040000 	.word	0x20040000
 8001734:	00000400 	.word	0x00000400
 8001738:	2000070c 	.word	0x2000070c
 800173c:	20000860 	.word	0x20000860

08001740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <SystemInit+0x20>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174a:	4a05      	ldr	r2, [pc, #20]	@ (8001760 <SystemInit+0x20>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800179c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001768:	f7ff ffea 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f003 ff89 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fb15 	bl	8000dc4 <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800179c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017a8:	080061f4 	.word	0x080061f4
  ldr r2, =_sbss
 80017ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017b0:	2000085c 	.word	0x2000085c

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <HAL_Init+0x40>)
 80017c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <HAL_Init+0x40>)
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_Init+0x40>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f94f 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff fdc2 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f967 	bl	8001aee <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 f92f 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000000 	.word	0x20000000
 8001854:	20000008 	.word	0x20000008
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008
 8001880:	20000710 	.word	0x20000710

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000710 	.word	0x20000710

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	@ (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff29 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff3e 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff8e 	bl	80019d8 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff31 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffa2 	bl	8001a40 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff feb6 	bl	8001884 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d008      	beq.n	8001b38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e052      	b.n	8001bde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0216 	bic.w	r2, r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_DMA_Abort+0x62>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0208 	bic.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b88:	e013      	b.n	8001bb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8a:	f7ff fe7b 	bl	8001884 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d90c      	bls.n	8001bb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e015      	b.n	8001bde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e4      	bne.n	8001b8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	223f      	movs	r2, #63	@ 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d004      	beq.n	8001c04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e00c      	b.n	8001c1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2205      	movs	r2, #5
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e165      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8154 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80ae 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a5c      	ldr	r2, [pc, #368]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a58      	ldr	r2, [pc, #352]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f34 <HAL_GPIO_Init+0x308>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	@ (8001f3c <HAL_GPIO_Init+0x310>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f40 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	@ (8001f44 <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a49      	ldr	r2, [pc, #292]	@ (8001f4c <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x202>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8a:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb4:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eba:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ede:	4a1c      	ldr	r2, [pc, #112]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f08:	4a11      	ldr	r2, [pc, #68]	@ (8001f50 <HAL_GPIO_Init+0x324>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae96 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af02      	add	r7, sp, #8
 8001fc0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e108      	b.n	80021de <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff facc 	bl	8001584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ffa:	d102      	bne.n	8002002 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 ffda 	bl	8004fc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7c1a      	ldrb	r2, [r3, #16]
 8002014:	f88d 2000 	strb.w	r2, [sp]
 8002018:	3304      	adds	r3, #4
 800201a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201c:	f002 ff6c 	bl	8004ef8 <USB_CoreInit>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0d5      	b.n	80021de <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f002 ffd2 	bl	8004fe2 <USB_SetCurrentMode>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0c6      	b.n	80021de <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e04a      	b.n	80020ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3315      	adds	r3, #21
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3314      	adds	r3, #20
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	b298      	uxth	r0, r3
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	332e      	adds	r3, #46	@ 0x2e
 8002092:	4602      	mov	r2, r0
 8002094:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3318      	adds	r3, #24
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	331c      	adds	r3, #28
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3320      	adds	r3, #32
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3324      	adds	r3, #36	@ 0x24
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	3301      	adds	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d3af      	bcc.n	8002056 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e044      	b.n	8002186 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	3301      	adds	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	429a      	cmp	r2, r3
 800218e:	d3b5      	bcc.n	80020fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7c1a      	ldrb	r2, [r3, #16]
 8002198:	f88d 2000 	strb.w	r2, [sp]
 800219c:	3304      	adds	r3, #4
 800219e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a0:	f002 ff6c 	bl	800507c <USB_DevInit>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e013      	b.n	80021de <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f80a 	bl	80021e6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f927 	bl	800542a <USB_DevDisconnect>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002218:	f043 0303 	orr.w	r3, r3, #3
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0cc      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b68      	ldr	r3, [pc, #416]	@ (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d90c      	bls.n	800226c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b65      	ldr	r3, [pc, #404]	@ (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	@ (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a58      	ldr	r2, [pc, #352]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800228e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a52      	ldr	r2, [pc, #328]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d044      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e067      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4934      	ldr	r1, [pc, #208]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7ff fab0 	bl	8001884 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff faac 	bl	8001884 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e04f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d20c      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	@ (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fa10 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08006098 	.word	0x08006098
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002400:	b094      	sub	sp, #80	@ 0x50
 8002402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002414:	4b79      	ldr	r3, [pc, #484]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d00d      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x40>
 8002420:	2b08      	cmp	r3, #8
 8002422:	f200 80e1 	bhi.w	80025e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x34>
 800242a:	2b04      	cmp	r3, #4
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x3a>
 800242e:	e0db      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b73      	ldr	r3, [pc, #460]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x204>)
 8002432:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002434:	e0db      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002436:	4b73      	ldr	r3, [pc, #460]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x208>)
 8002438:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800243a:	e0d8      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800243c:	4b6f      	ldr	r3, [pc, #444]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002444:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002446:	4b6d      	ldr	r3, [pc, #436]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d063      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002452:	4b6a      	ldr	r3, [pc, #424]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	2200      	movs	r2, #0
 800245a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800245c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
 800246a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800246e:	4622      	mov	r2, r4
 8002470:	462b      	mov	r3, r5
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	0159      	lsls	r1, r3, #5
 800247c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002480:	0150      	lsls	r0, r2, #5
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4621      	mov	r1, r4
 8002488:	1a51      	subs	r1, r2, r1
 800248a:	6139      	str	r1, [r7, #16]
 800248c:	4629      	mov	r1, r5
 800248e:	eb63 0301 	sbc.w	r3, r3, r1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a0:	4659      	mov	r1, fp
 80024a2:	018b      	lsls	r3, r1, #6
 80024a4:	4651      	mov	r1, sl
 80024a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024aa:	4651      	mov	r1, sl
 80024ac:	018a      	lsls	r2, r1, #6
 80024ae:	4651      	mov	r1, sl
 80024b0:	ebb2 0801 	subs.w	r8, r2, r1
 80024b4:	4659      	mov	r1, fp
 80024b6:	eb63 0901 	sbc.w	r9, r3, r1
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ce:	4690      	mov	r8, r2
 80024d0:	4699      	mov	r9, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	eb18 0303 	adds.w	r3, r8, r3
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	462b      	mov	r3, r5
 80024dc:	eb49 0303 	adc.w	r3, r9, r3
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ee:	4629      	mov	r1, r5
 80024f0:	024b      	lsls	r3, r1, #9
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024f8:	4621      	mov	r1, r4
 80024fa:	024a      	lsls	r2, r1, #9
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002502:	2200      	movs	r2, #0
 8002504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800250c:	f7fd fee8 	bl	80002e0 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002518:	e058      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	2200      	movs	r2, #0
 8002522:	4618      	mov	r0, r3
 8002524:	4611      	mov	r1, r2
 8002526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0159      	lsls	r1, r3, #5
 8002542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002546:	0150      	lsls	r0, r2, #5
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4641      	mov	r1, r8
 800254e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002552:	4649      	mov	r1, r9
 8002554:	eb63 0b01 	sbc.w	fp, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800256c:	ebb2 040a 	subs.w	r4, r2, sl
 8002570:	eb63 050b 	sbc.w	r5, r3, fp
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	00eb      	lsls	r3, r5, #3
 800257e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002582:	00e2      	lsls	r2, r4, #3
 8002584:	4614      	mov	r4, r2
 8002586:	461d      	mov	r5, r3
 8002588:	4643      	mov	r3, r8
 800258a:	18e3      	adds	r3, r4, r3
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	464b      	mov	r3, r9
 8002590:	eb45 0303 	adc.w	r3, r5, r3
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a2:	4629      	mov	r1, r5
 80025a4:	028b      	lsls	r3, r1, #10
 80025a6:	4621      	mov	r1, r4
 80025a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ac:	4621      	mov	r1, r4
 80025ae:	028a      	lsls	r2, r1, #10
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b6:	2200      	movs	r2, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	61fa      	str	r2, [r7, #28]
 80025bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c0:	f7fd fe8e 	bl	80002e0 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4613      	mov	r3, r2
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3750      	adds	r7, #80	@ 0x50
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	007a1200 	.word	0x007a1200

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <HAL_RCC_GetHCLKFreq+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	@ (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	080060a8 	.word	0x080060a8

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800264c:	f7ff ffdc 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0b5b      	lsrs	r3, r3, #13
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	@ (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	080060a8 	.word	0x080060a8

08002670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002690:	4b87      	ldr	r3, [pc, #540]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002696:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4984      	ldr	r1, [pc, #528]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80026ae:	2301      	movs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026be:	4b7c      	ldr	r3, [pc, #496]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4978      	ldr	r1, [pc, #480]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8083 	beq.w	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b6f      	ldr	r3, [pc, #444]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	4a6e      	ldr	r2, [pc, #440]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026fe:	4b6c      	ldr	r3, [pc, #432]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800270a:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002716:	f7ff f8b5 	bl	8001884 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff f8b1 	bl	8001884 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e162      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002730:	4b60      	ldr	r3, [pc, #384]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800273c:	4b5c      	ldr	r3, [pc, #368]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002744:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02f      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	429a      	cmp	r2, r3
 8002758:	d028      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800275a:	4b55      	ldr	r3, [pc, #340]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002762:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002764:	4b54      	ldr	r3, [pc, #336]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b53      	ldr	r3, [pc, #332]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002770:	4a4f      	ldr	r2, [pc, #316]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002776:	4b4e      	ldr	r3, [pc, #312]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d114      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff f87f 	bl	8001884 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7ff f87b 	bl	8001884 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e12a      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80027ba:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80027ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ce:	4938      	ldr	r1, [pc, #224]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
 80027d4:	e005      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80027d6:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a35      	ldr	r2, [pc, #212]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	4b33      	ldr	r3, [pc, #204]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	4930      	ldr	r1, [pc, #192]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002808:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002816:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	4922      	ldr	r1, [pc, #136]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d011      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002838:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002846:	491a      	ldr	r1, [pc, #104]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002856:	d101      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002858:	2301      	movs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	490e      	ldr	r1, [pc, #56]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d004      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b80      	cmp	r3, #128	@ 0x80
 800288a:	f040 8091 	bne.w	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002894:	f7fe fff6 	bl	8001884 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800289a:	e013      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800289c:	f7fe fff2 	bl	8001884 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d90c      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0a3      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42470e40 	.word	0x42470e40
 80028bc:	424711e0 	.word	0x424711e0
 80028c0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e5      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80028d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d019      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002914:	d00e      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d115      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002932:	d110      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	492c      	ldr	r1, [pc, #176]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	019b      	lsls	r3, r3, #6
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	071b      	lsls	r3, r3, #28
 800297c:	4920      	ldr	r1, [pc, #128]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800298a:	f7fe ff7b 	bl	8001884 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002992:	f7fe ff77 	bl	8001884 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e028      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029a4:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029bc:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	490d      	ldr	r1, [pc, #52]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	424710d8 	.word	0x424710d8
 8002a08:	42470068 	.word	0x42470068

08002a0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e273      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d075      	beq.n	8002b16 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a2a:	4b88      	ldr	r3, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b85      	ldr	r3, [pc, #532]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a42:	4b82      	ldr	r3, [pc, #520]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	4b7e      	ldr	r3, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05b      	beq.n	8002b14 <HAL_RCC_OscConfig+0x108>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d157      	bne.n	8002b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e24e      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x74>
 8002a72:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e01d      	b.n	8002abc <HAL_RCC_OscConfig+0xb0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x98>
 8002a8a:	4b70      	ldr	r3, [pc, #448]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6d      	ldr	r3, [pc, #436]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0xb0>
 8002aa4:	4b69      	ldr	r3, [pc, #420]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a68      	ldr	r2, [pc, #416]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a65      	ldr	r2, [pc, #404]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fede 	bl	8001884 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe feda 	bl	8001884 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e213      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b5b      	ldr	r3, [pc, #364]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0xc0>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe feca 	bl	8001884 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fec6 	bl	8001884 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1ff      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0xe8>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b22:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1d3      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4937      	ldr	r1, [pc, #220]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	e03a      	b.n	8002bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b34      	ldr	r3, [pc, #208]	@ (8002c50 <HAL_RCC_OscConfig+0x244>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fe7f 	bl	8001884 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe fe7b 	bl	8001884 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1b4      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4925      	ldr	r1, [pc, #148]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_OscConfig+0x244>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fe5e 	bl	8001884 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fe5a 	bl	8001884 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e193      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d036      	beq.n	8002c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x248>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fe3e 	bl	8001884 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fe3a 	bl	8001884 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e173      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x200>
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <HAL_RCC_OscConfig+0x248>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fe27 	bl	8001884 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fe23 	bl	8001884 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e15c      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b8a      	ldr	r3, [pc, #552]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ea      	bne.n	8002c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8097 	beq.w	8002da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b83      	ldr	r3, [pc, #524]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	4b7f      	ldr	r3, [pc, #508]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c92:	4b7c      	ldr	r3, [pc, #496]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b79      	ldr	r3, [pc, #484]	@ (8002e88 <HAL_RCC_OscConfig+0x47c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cae:	4b76      	ldr	r3, [pc, #472]	@ (8002e88 <HAL_RCC_OscConfig+0x47c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	@ (8002e88 <HAL_RCC_OscConfig+0x47c>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fde3 	bl	8001884 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe fddf 	bl	8001884 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e118      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e88 <HAL_RCC_OscConfig+0x47c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2ea>
 8002ce8:	4b66      	ldr	r3, [pc, #408]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a65      	ldr	r2, [pc, #404]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x324>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x30c>
 8002cfe:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a60      	ldr	r2, [pc, #384]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x324>
 8002d18:	4b5a      	ldr	r3, [pc, #360]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	4a59      	ldr	r2, [pc, #356]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d24:	4b57      	ldr	r3, [pc, #348]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	4a56      	ldr	r2, [pc, #344]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d2a:	f023 0304 	bic.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fda4 	bl	8001884 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe fda0 	bl	8001884 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0d7      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ee      	beq.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fd8e 	bl	8001884 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fd8a 	bl	8001884 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0c1      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	4b40      	ldr	r3, [pc, #256]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80ad 	beq.w	8002f04 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002daa:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d060      	beq.n	8002e78 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d145      	bne.n	8002e4a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_RCC_OscConfig+0x480>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fd5e 	bl	8001884 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fd5a 	bl	8001884 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e093      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	491b      	ldr	r1, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_OscConfig+0x480>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fd2f 	bl	8001884 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fd2b 	bl	8001884 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e064      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x41e>
 8002e48:	e05c      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_RCC_OscConfig+0x480>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fd18 	bl	8001884 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fd14 	bl	8001884 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e04d      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x44c>
 8002e76:	e045      	b.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e040      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <HAL_RCC_OscConfig+0x504>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d030      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d129      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d122      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d119      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d10f      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e01c      	b.n	8002f60 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	795b      	ldrb	r3, [r3, #5]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fa44 	bl	80013c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0204 	orr.w	r2, r2, #4
 8002f50:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	791b      	ldrb	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e044      	b.n	800300c <HAL_RNG_GenerateRandomNumber+0xa4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	795b      	ldrb	r3, [r3, #5]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d133      	bne.n	8002ffa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fe fc74 	bl	8001884 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002f9e:	e018      	b.n	8002fd2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002fa0:	f7fe fc70 	bl	8001884 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d911      	bls.n	8002fd2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e01c      	b.n	800300c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d1df      	bne.n	8002fa0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	715a      	strb	r2, [r3, #5]
 8002ff8:	e004      	b.n	8003004 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	711a      	strb	r2, [r3, #4]

  return status;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e041      	b.n	80030aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe f9f6 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 fa52 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e041      	b.n	8003148 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f839 	bl	8003150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f000 fa03 	bl	80034fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800317e:	2302      	movs	r3, #2
 8003180:	e0ae      	b.n	80032e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b0c      	cmp	r3, #12
 800318e:	f200 809f 	bhi.w	80032d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003192:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080032d1 	.word	0x080032d1
 80031a0:	080032d1 	.word	0x080032d1
 80031a4:	080032d1 	.word	0x080032d1
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	080032d1 	.word	0x080032d1
 80031b0:	080032d1 	.word	0x080032d1
 80031b4:	080032d1 	.word	0x080032d1
 80031b8:	0800324f 	.word	0x0800324f
 80031bc:	080032d1 	.word	0x080032d1
 80031c0:	080032d1 	.word	0x080032d1
 80031c4:	080032d1 	.word	0x080032d1
 80031c8:	0800328f 	.word	0x0800328f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa38 	bl	8003648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0204 	bic.w	r2, r2, #4
 80031f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6999      	ldr	r1, [r3, #24]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	619a      	str	r2, [r3, #24]
      break;
 800320a:	e064      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa88 	bl	8003728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	619a      	str	r2, [r3, #24]
      break;
 800324c:	e043      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fadd 	bl	8003814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0208 	orr.w	r2, r2, #8
 8003268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0204 	bic.w	r2, r2, #4
 8003278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	61da      	str	r2, [r3, #28]
      break;
 800328c:	e023      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb31 	bl	80038fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69d9      	ldr	r1, [r3, #28]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	021a      	lsls	r2, r3, #8
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	61da      	str	r2, [r3, #28]
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
      break;
 80032d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIM_ConfigClockSource+0x1c>
 8003300:	2302      	movs	r3, #2
 8003302:	e0b4      	b.n	800346e <HAL_TIM_ConfigClockSource+0x186>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800332a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800333c:	d03e      	beq.n	80033bc <HAL_TIM_ConfigClockSource+0xd4>
 800333e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003342:	f200 8087 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800334a:	f000 8086 	beq.w	800345a <HAL_TIM_ConfigClockSource+0x172>
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003352:	d87f      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b70      	cmp	r3, #112	@ 0x70
 8003356:	d01a      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xa6>
 8003358:	2b70      	cmp	r3, #112	@ 0x70
 800335a:	d87b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b60      	cmp	r3, #96	@ 0x60
 800335e:	d050      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x11a>
 8003360:	2b60      	cmp	r3, #96	@ 0x60
 8003362:	d877      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b50      	cmp	r3, #80	@ 0x50
 8003366:	d03c      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003368:	2b50      	cmp	r3, #80	@ 0x50
 800336a:	d873      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b40      	cmp	r3, #64	@ 0x40
 800336e:	d058      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x13a>
 8003370:	2b40      	cmp	r3, #64	@ 0x40
 8003372:	d86f      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b30      	cmp	r3, #48	@ 0x30
 8003376:	d064      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 8003378:	2b30      	cmp	r3, #48	@ 0x30
 800337a:	d86b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d060      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d867      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05c      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	2b10      	cmp	r3, #16
 800338a:	d05a      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	e062      	b.n	8003454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800339e:	f000 fc0e 	bl	8003bbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	609a      	str	r2, [r3, #8]
      break;
 80033ba:	e04f      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	f000 fbf7 	bl	8003bbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033de:	609a      	str	r2, [r3, #8]
      break;
 80033e0:	e03c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 fb6b 	bl	8003aca <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2150      	movs	r1, #80	@ 0x50
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fbc4 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 8003400:	e02c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fb8a 	bl	8003b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2160      	movs	r1, #96	@ 0x60
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fbb4 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 8003420:	e01c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	461a      	mov	r2, r3
 8003430:	f000 fb4b 	bl	8003aca <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2140      	movs	r1, #64	@ 0x40
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fba4 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 8003440:	e00c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 fb9b 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 8003452:	e003      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      break;
 8003458:	e000      	b.n	800345c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800345a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_TIM_SlaveConfigSynchro+0x18>
 800348a:	2302      	movs	r3, #2
 800348c:	e031      	b.n	80034f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa81 	bl	80039a8 <TIM_SlaveTimer_SetConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e018      	b.n	80034f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a43      	ldr	r2, [pc, #268]	@ (800361c <TIM_Base_SetConfig+0x120>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a40      	ldr	r2, [pc, #256]	@ (8003620 <TIM_Base_SetConfig+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3f      	ldr	r2, [pc, #252]	@ (8003624 <TIM_Base_SetConfig+0x128>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3e      	ldr	r2, [pc, #248]	@ (8003628 <TIM_Base_SetConfig+0x12c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3d      	ldr	r2, [pc, #244]	@ (800362c <TIM_Base_SetConfig+0x130>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a32      	ldr	r2, [pc, #200]	@ (800361c <TIM_Base_SetConfig+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355c:	d027      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2f      	ldr	r2, [pc, #188]	@ (8003620 <TIM_Base_SetConfig+0x124>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d023      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2e      	ldr	r2, [pc, #184]	@ (8003624 <TIM_Base_SetConfig+0x128>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2d      	ldr	r2, [pc, #180]	@ (8003628 <TIM_Base_SetConfig+0x12c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <TIM_Base_SetConfig+0x130>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d017      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2b      	ldr	r2, [pc, #172]	@ (8003630 <TIM_Base_SetConfig+0x134>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2a      	ldr	r2, [pc, #168]	@ (8003634 <TIM_Base_SetConfig+0x138>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00f      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a29      	ldr	r2, [pc, #164]	@ (8003638 <TIM_Base_SetConfig+0x13c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a28      	ldr	r2, [pc, #160]	@ (800363c <TIM_Base_SetConfig+0x140>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a27      	ldr	r2, [pc, #156]	@ (8003640 <TIM_Base_SetConfig+0x144>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <TIM_Base_SetConfig+0x148>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0e      	ldr	r2, [pc, #56]	@ (800361c <TIM_Base_SetConfig+0x120>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0xf2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a10      	ldr	r2, [pc, #64]	@ (800362c <TIM_Base_SetConfig+0x130>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d103      	bne.n	80035f6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40010000 	.word	0x40010000
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40010400 	.word	0x40010400
 8003630:	40014000 	.word	0x40014000
 8003634:	40014400 	.word	0x40014400
 8003638:	40014800 	.word	0x40014800
 800363c:	40001800 	.word	0x40001800
 8003640:	40001c00 	.word	0x40001c00
 8003644:	40002000 	.word	0x40002000

08003648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 0201 	bic.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 0302 	bic.w	r3, r3, #2
 8003690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <TIM_OC1_SetConfig+0xd8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_OC1_SetConfig+0x64>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003724 <TIM_OC1_SetConfig+0xdc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10c      	bne.n	80036c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0308 	bic.w	r3, r3, #8
 80036b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a15      	ldr	r2, [pc, #84]	@ (8003720 <TIM_OC1_SetConfig+0xd8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_OC1_SetConfig+0x8e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a14      	ldr	r2, [pc, #80]	@ (8003724 <TIM_OC1_SetConfig+0xdc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 0210 	bic.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0320 	bic.w	r3, r3, #32
 8003772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a22      	ldr	r2, [pc, #136]	@ (800380c <TIM_OC2_SetConfig+0xe4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_OC2_SetConfig+0x68>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a21      	ldr	r2, [pc, #132]	@ (8003810 <TIM_OC2_SetConfig+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d10d      	bne.n	80037ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a17      	ldr	r2, [pc, #92]	@ (800380c <TIM_OC2_SetConfig+0xe4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_OC2_SetConfig+0x94>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a16      	ldr	r2, [pc, #88]	@ (8003810 <TIM_OC2_SetConfig+0xe8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d113      	bne.n	80037e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40010400 	.word	0x40010400

08003814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800385c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <TIM_OC3_SetConfig+0xe0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_OC3_SetConfig+0x66>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a20      	ldr	r2, [pc, #128]	@ (80038f8 <TIM_OC3_SetConfig+0xe4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10d      	bne.n	8003896 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <TIM_OC3_SetConfig+0xe0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_OC3_SetConfig+0x92>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a15      	ldr	r2, [pc, #84]	@ (80038f8 <TIM_OC3_SetConfig+0xe4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d113      	bne.n	80038ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40010400 	.word	0x40010400

080038fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	031b      	lsls	r3, r3, #12
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a12      	ldr	r2, [pc, #72]	@ (80039a0 <TIM_OC4_SetConfig+0xa4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_OC4_SetConfig+0x68>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <TIM_OC4_SetConfig+0xa8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d109      	bne.n	8003978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800396a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40010400 	.word	0x40010400

080039a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f023 0307 	bic.w	r3, r3, #7
 80039d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b70      	cmp	r3, #112	@ 0x70
 80039f0:	d01a      	beq.n	8003a28 <TIM_SlaveTimer_SetConfig+0x80>
 80039f2:	2b70      	cmp	r3, #112	@ 0x70
 80039f4:	d860      	bhi.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
 80039f6:	2b60      	cmp	r3, #96	@ 0x60
 80039f8:	d054      	beq.n	8003aa4 <TIM_SlaveTimer_SetConfig+0xfc>
 80039fa:	2b60      	cmp	r3, #96	@ 0x60
 80039fc:	d85c      	bhi.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
 80039fe:	2b50      	cmp	r3, #80	@ 0x50
 8003a00:	d046      	beq.n	8003a90 <TIM_SlaveTimer_SetConfig+0xe8>
 8003a02:	2b50      	cmp	r3, #80	@ 0x50
 8003a04:	d858      	bhi.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d019      	beq.n	8003a3e <TIM_SlaveTimer_SetConfig+0x96>
 8003a0a:	2b40      	cmp	r3, #64	@ 0x40
 8003a0c:	d854      	bhi.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8003a0e:	2b30      	cmp	r3, #48	@ 0x30
 8003a10:	d055      	beq.n	8003abe <TIM_SlaveTimer_SetConfig+0x116>
 8003a12:	2b30      	cmp	r3, #48	@ 0x30
 8003a14:	d850      	bhi.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d051      	beq.n	8003abe <TIM_SlaveTimer_SetConfig+0x116>
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d84c      	bhi.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d04d      	beq.n	8003abe <TIM_SlaveTimer_SetConfig+0x116>
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d04b      	beq.n	8003abe <TIM_SlaveTimer_SetConfig+0x116>
 8003a26:	e047      	b.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003a38:	f000 f8c1 	bl	8003bbe <TIM_ETR_SetConfig>
      break;
 8003a3c:	e040      	b.n	8003ac0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d101      	bne.n	8003a4a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e03b      	b.n	8003ac2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	621a      	str	r2, [r3, #32]
      break;
 8003a8e:	e017      	b.n	8003ac0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f000 f814 	bl	8003aca <TIM_TI1_ConfigInputStage>
      break;
 8003aa2:	e00d      	b.n	8003ac0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f000 f839 	bl	8003b28 <TIM_TI2_ConfigInputStage>
      break;
 8003ab6:	e003      	b.n	8003ac0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	e000      	b.n	8003ac0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003abe:	bf00      	nop
  }

  return status;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f023 0201 	bic.w	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 030a 	bic.w	r3, r3, #10
 8003b06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 0210 	bic.w	r2, r3, #16
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	031b      	lsls	r3, r3, #12
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f043 0307 	orr.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e05a      	b.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a21      	ldr	r2, [pc, #132]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c64:	d01d      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d018      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10c      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40010400 	.word	0x40010400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40001800 	.word	0x40001800

08003cf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e03d      	b.n	8003d90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e042      	b.n	8003e34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fb8e 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	@ 0x24
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fe15 	bl	8004a10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d175      	bne.n	8003f48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Transmit+0x2c>
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e06e      	b.n	8003f4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2221      	movs	r2, #33	@ 0x21
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fd03 	bl	8001884 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e94:	d108      	bne.n	8003ea8 <HAL_UART_Transmit+0x6c>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e003      	b.n	8003eb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb0:	e02e      	b.n	8003f10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fbb3 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e03a      	b.n	8003f4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	3302      	adds	r3, #2
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e007      	b.n	8003f02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1cb      	bne.n	8003eb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2140      	movs	r1, #64	@ 0x40
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fb7f 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e006      	b.n	8003f4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08a      	sub	sp, #40	@ 0x28
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 8081 	bne.w	8004076 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_UART_Receive+0x2e>
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e079      	b.n	8004078 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2222      	movs	r2, #34	@ 0x22
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f98:	f7fd fc74 	bl	8001884 <HAL_GetTick>
 8003f9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb2:	d108      	bne.n	8003fc6 <HAL_UART_Receive+0x74>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e003      	b.n	8003fce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003fce:	e047      	b.n	8004060 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2120      	movs	r1, #32
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fb24 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e042      	b.n	8004078 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10c      	bne.n	8004012 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004004:	b29a      	uxth	r2, r3
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	3302      	adds	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e01f      	b.n	8004052 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	d007      	beq.n	800402c <HAL_UART_Receive+0xda>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_UART_Receive+0xe8>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e008      	b.n	800404c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004046:	b2da      	uxtb	r2, r3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	3301      	adds	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1b2      	bne.n	8003fd0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b0ba      	sub	sp, #232	@ 0xe8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_UART_IRQHandler+0x66>
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fbd7 	bl	8004892 <UART_Receive_IT>
      return;
 80040e4:	e273      	b.n	80045ce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80de 	beq.w	80042ac <HAL_UART_IRQHandler+0x22c>
 80040f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004100:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80d1 	beq.w	80042ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_UART_IRQHandler+0xae>
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_UART_IRQHandler+0xd2>
 800413a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0202 	orr.w	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_UART_IRQHandler+0xf6>
 800415e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	f043 0204 	orr.w	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d011      	beq.n	80041a6 <HAL_UART_IRQHandler+0x126>
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0208 	orr.w	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 820a 	beq.w	80045c4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x14e>
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fb62 	bl	8004892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_UART_IRQHandler+0x17a>
 80041f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d04f      	beq.n	800429a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa6d 	bl	80046da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	d141      	bne.n	8004292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800423a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800423e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1d9      	bne.n	800420e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d013      	beq.n	800428a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	4a8a      	ldr	r2, [pc, #552]	@ (8004490 <HAL_UART_IRQHandler+0x410>)
 8004268:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd fcb9 	bl	8001be6 <HAL_DMA_Abort_IT>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004284:	4610      	mov	r0, r2
 8004286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	e00e      	b.n	80042a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9b6 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	e00a      	b.n	80042a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f9b2 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e006      	b.n	80042a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9ae 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042a6:	e18d      	b.n	80045c4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	bf00      	nop
    return;
 80042aa:	e18b      	b.n	80045c4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f040 8167 	bne.w	8004584 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8160 	beq.w	8004584 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8159 	beq.w	8004584 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	f040 80ce 	bne.w	8004494 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a9 	beq.w	8004460 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004316:	429a      	cmp	r2, r3
 8004318:	f080 80a2 	bcs.w	8004460 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004322:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432e:	f000 8088 	beq.w	8004442 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800435e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800436a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1d9      	bne.n	8004332 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3314      	adds	r3, #20
 8004384:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800438e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3314      	adds	r3, #20
 800439e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e1      	bne.n	800437e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004412:	f023 0310 	bic.w	r3, r3, #16
 8004416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004424:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004426:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800442a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd fb62 	bl	8001b06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	b29b      	uxth	r3, r3
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f8d9 	bl	8004610 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800445e:	e0b3      	b.n	80045c8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004468:	429a      	cmp	r2, r3
 800446a:	f040 80ad 	bne.w	80045c8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004478:	f040 80a6 	bne.w	80045c8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8c1 	bl	8004610 <HAL_UARTEx_RxEventCallback>
      return;
 800448e:	e09b      	b.n	80045c8 <HAL_UART_IRQHandler+0x548>
 8004490:	080047a1 	.word	0x080047a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800449c:	b29b      	uxth	r3, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 808e 	beq.w	80045cc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8089 	beq.w	80045cc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044de:	647a      	str	r2, [r7, #68]	@ 0x44
 80044e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	623b      	str	r3, [r7, #32]
   return(result);
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004516:	633a      	str	r2, [r7, #48]	@ 0x30
 8004518:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800451c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e3      	bne.n	80044f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60fb      	str	r3, [r7, #12]
   return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800455c:	61fa      	str	r2, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e3      	bne.n	8004538 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f847 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004582:	e023      	b.n	80045cc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_UART_IRQHandler+0x524>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f910 	bl	80047c2 <UART_Transmit_IT>
    return;
 80045a2:	e014      	b.n	80045ce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <HAL_UART_IRQHandler+0x54e>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f950 	bl	8004862 <UART_EndTransmit_IT>
    return;
 80045c2:	e004      	b.n	80045ce <HAL_UART_IRQHandler+0x54e>
    return;
 80045c4:	bf00      	nop
 80045c6:	e002      	b.n	80045ce <HAL_UART_IRQHandler+0x54e>
      return;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_UART_IRQHandler+0x54e>
      return;
 80045cc:	bf00      	nop
  }
}
 80045ce:	37e8      	adds	r7, #232	@ 0xe8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e03b      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d037      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd f91f 	bl	8001884 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03a      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d023      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	d020      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d01d      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d116      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f81d 	bl	80046da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2208      	movs	r2, #8
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b4      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b095      	sub	sp, #84	@ 0x54
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004702:	643a      	str	r2, [r7, #64]	@ 0x40
 8004704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	61fb      	str	r3, [r7, #28]
   return(result);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d119      	bne.n	8004786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	60bb      	str	r3, [r7, #8]
   return(result);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004772:	61ba      	str	r2, [r7, #24]
 8004774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	613b      	str	r3, [r7, #16]
   return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004794:	bf00      	nop
 8004796:	3754      	adds	r7, #84	@ 0x54
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff ff21 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b21      	cmp	r3, #33	@ 0x21
 80047d4:	d13e      	bne.n	8004854 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047de:	d114      	bne.n	800480a <UART_Transmit_IT+0x48>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d110      	bne.n	800480a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	621a      	str	r2, [r3, #32]
 8004808:	e008      	b.n	800481c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6211      	str	r1, [r2, #32]
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29b      	uxth	r3, r3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4619      	mov	r1, r3
 800482a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10f      	bne.n	8004850 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800483e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800484e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fea6 	bl	80045d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b08c      	sub	sp, #48	@ 0x30
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b22      	cmp	r3, #34	@ 0x22
 80048ac:	f040 80aa 	bne.w	8004a04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b8:	d115      	bne.n	80048e6 <UART_Receive_IT+0x54>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d111      	bne.n	80048e6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e4:	e024      	b.n	8004930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f4:	d007      	beq.n	8004906 <UART_Receive_IT+0x74>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <UART_Receive_IT+0x82>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e008      	b.n	8004926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004920:	b2da      	uxtb	r2, r3
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4619      	mov	r1, r3
 800493e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004940:	2b00      	cmp	r3, #0
 8004942:	d15d      	bne.n	8004a00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0220 	bic.w	r2, r2, #32
 8004952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	2b01      	cmp	r3, #1
 8004988:	d135      	bne.n	80049f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	613b      	str	r3, [r7, #16]
   return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 0310 	bic.w	r3, r3, #16
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b0:	623a      	str	r2, [r7, #32]
 80049b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d10a      	bne.n	80049e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fe0e 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 80049f4:	e002      	b.n	80049fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fdf6 	bl	80045e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e002      	b.n	8004a06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
  }
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3730      	adds	r7, #48	@ 0x30
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a14:	b0c0      	sub	sp, #256	@ 0x100
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	68d9      	ldr	r1, [r3, #12]
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	ea40 0301 	orr.w	r3, r0, r1
 8004a38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a68:	f021 010c 	bic.w	r1, r1, #12
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a76:	430b      	orrs	r3, r1
 8004a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	6999      	ldr	r1, [r3, #24]
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	ea40 0301 	orr.w	r3, r0, r1
 8004a96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b8f      	ldr	r3, [pc, #572]	@ (8004cdc <UART_SetConfig+0x2cc>)
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d005      	beq.n	8004ab0 <UART_SetConfig+0xa0>
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8004ce0 <UART_SetConfig+0x2d0>)
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d104      	bne.n	8004aba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ab0:	f7fd fdca 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 8004ab4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ab8:	e003      	b.n	8004ac2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aba:	f7fd fdb1 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8004abe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004acc:	f040 810c 	bne.w	8004ce8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ada:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ade:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	1891      	adds	r1, r2, r2
 8004ae8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004aea:	415b      	adcs	r3, r3
 8004aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004af2:	4621      	mov	r1, r4
 8004af4:	eb12 0801 	adds.w	r8, r2, r1
 8004af8:	4629      	mov	r1, r5
 8004afa:	eb43 0901 	adc.w	r9, r3, r1
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b12:	4690      	mov	r8, r2
 8004b14:	4699      	mov	r9, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	eb18 0303 	adds.w	r3, r8, r3
 8004b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b20:	462b      	mov	r3, r5
 8004b22:	eb49 0303 	adc.w	r3, r9, r3
 8004b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b3e:	460b      	mov	r3, r1
 8004b40:	18db      	adds	r3, r3, r3
 8004b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b44:	4613      	mov	r3, r2
 8004b46:	eb42 0303 	adc.w	r3, r2, r3
 8004b4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b54:	f7fb fbc4 	bl	80002e0 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4b61      	ldr	r3, [pc, #388]	@ (8004ce4 <UART_SetConfig+0x2d4>)
 8004b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	011c      	lsls	r4, r3, #4
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b80:	415b      	adcs	r3, r3
 8004b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b88:	4641      	mov	r1, r8
 8004b8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b8e:	4649      	mov	r1, r9
 8004b90:	eb43 0b01 	adc.w	fp, r3, r1
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ba0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba8:	4692      	mov	sl, r2
 8004baa:	469b      	mov	fp, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	eb1a 0303 	adds.w	r3, sl, r3
 8004bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	18db      	adds	r3, r3, r3
 8004bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bda:	4613      	mov	r3, r2
 8004bdc:	eb42 0303 	adc.w	r3, r2, r3
 8004be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004be2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004be6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bea:	f7fb fb79 	bl	80002e0 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce4 <UART_SetConfig+0x2d4>)
 8004bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	2264      	movs	r2, #100	@ 0x64
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	1acb      	subs	r3, r1, r3
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c0a:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <UART_SetConfig+0x2d4>)
 8004c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c18:	441c      	add	r4, r3
 8004c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	464b      	mov	r3, r9
 8004c30:	1891      	adds	r1, r2, r2
 8004c32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c34:	415b      	adcs	r3, r3
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	1851      	adds	r1, r2, r1
 8004c40:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c42:	4649      	mov	r1, r9
 8004c44:	414b      	adcs	r3, r1
 8004c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c54:	4659      	mov	r1, fp
 8004c56:	00cb      	lsls	r3, r1, #3
 8004c58:	4651      	mov	r1, sl
 8004c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5e:	4651      	mov	r1, sl
 8004c60:	00ca      	lsls	r2, r1, #3
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	4642      	mov	r2, r8
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c70:	464b      	mov	r3, r9
 8004c72:	460a      	mov	r2, r1
 8004c74:	eb42 0303 	adc.w	r3, r2, r3
 8004c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c90:	460b      	mov	r3, r1
 8004c92:	18db      	adds	r3, r3, r3
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c96:	4613      	mov	r3, r2
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ca2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ca6:	f7fb fb1b 	bl	80002e0 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <UART_SetConfig+0x2d4>)
 8004cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2164      	movs	r1, #100	@ 0x64
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	3332      	adds	r3, #50	@ 0x32
 8004cc2:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <UART_SetConfig+0x2d4>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	f003 0207 	and.w	r2, r3, #7
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4422      	add	r2, r4
 8004cd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cd8:	e106      	b.n	8004ee8 <UART_SetConfig+0x4d8>
 8004cda:	bf00      	nop
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	40011400 	.word	0x40011400
 8004ce4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	1891      	adds	r1, r2, r2
 8004d00:	6239      	str	r1, [r7, #32]
 8004d02:	415b      	adcs	r3, r3
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	1854      	adds	r4, r2, r1
 8004d0e:	4649      	mov	r1, r9
 8004d10:	eb43 0501 	adc.w	r5, r3, r1
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	00eb      	lsls	r3, r5, #3
 8004d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d22:	00e2      	lsls	r2, r4, #3
 8004d24:	4614      	mov	r4, r2
 8004d26:	461d      	mov	r5, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	18e3      	adds	r3, r4, r3
 8004d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d30:	464b      	mov	r3, r9
 8004d32:	eb45 0303 	adc.w	r3, r5, r3
 8004d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d56:	4629      	mov	r1, r5
 8004d58:	008b      	lsls	r3, r1, #2
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d60:	4621      	mov	r1, r4
 8004d62:	008a      	lsls	r2, r1, #2
 8004d64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d68:	f7fb faba 	bl	80002e0 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4b60      	ldr	r3, [pc, #384]	@ (8004ef4 <UART_SetConfig+0x4e4>)
 8004d72:	fba3 2302 	umull	r2, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	011c      	lsls	r4, r3, #4
 8004d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	61b9      	str	r1, [r7, #24]
 8004d94:	415b      	adcs	r3, r3
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6139      	str	r1, [r7, #16]
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004de6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004df4:	4649      	mov	r1, r9
 8004df6:	008b      	lsls	r3, r1, #2
 8004df8:	4641      	mov	r1, r8
 8004dfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfe:	4641      	mov	r1, r8
 8004e00:	008a      	lsls	r2, r1, #2
 8004e02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e06:	f7fb fa6b 	bl	80002e0 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4b38      	ldr	r3, [pc, #224]	@ (8004ef4 <UART_SetConfig+0x4e4>)
 8004e12:	fba3 2301 	umull	r2, r3, r3, r1
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2264      	movs	r2, #100	@ 0x64
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	1acb      	subs	r3, r1, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	3332      	adds	r3, #50	@ 0x32
 8004e24:	4a33      	ldr	r2, [pc, #204]	@ (8004ef4 <UART_SetConfig+0x4e4>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e30:	441c      	add	r4, r3
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	1891      	adds	r1, r2, r2
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	415b      	adcs	r3, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e50:	4641      	mov	r1, r8
 8004e52:	1851      	adds	r1, r2, r1
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	4649      	mov	r1, r9
 8004e58:	414b      	adcs	r3, r1
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e68:	4659      	mov	r1, fp
 8004e6a:	00cb      	lsls	r3, r1, #3
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e72:	4651      	mov	r1, sl
 8004e74:	00ca      	lsls	r2, r1, #3
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e82:	464b      	mov	r3, r9
 8004e84:	460a      	mov	r2, r1
 8004e86:	eb42 0303 	adc.w	r3, r2, r3
 8004e8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e96:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	008b      	lsls	r3, r1, #2
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eae:	4641      	mov	r1, r8
 8004eb0:	008a      	lsls	r2, r1, #2
 8004eb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004eb6:	f7fb fa13 	bl	80002e0 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <UART_SetConfig+0x4e4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	@ 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	3332      	adds	r3, #50	@ 0x32
 8004ed2:	4a08      	ldr	r2, [pc, #32]	@ (8004ef4 <UART_SetConfig+0x4e4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 020f 	and.w	r2, r3, #15
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4422      	add	r2, r4
 8004ee6:	609a      	str	r2, [r3, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef4:	51eb851f 	.word	0x51eb851f

08004ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ef8:	b084      	sub	sp, #16
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	f107 001c 	add.w	r0, r7, #28
 8004f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d123      	bne.n	8004f5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa9a 	bl	8005488 <USB_CoreReset>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e01b      	b.n	8004f92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fa8e 	bl	8005488 <USB_CoreReset>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f84:	e005      	b.n	8004f92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f92:	7fbb      	ldrb	r3, [r7, #30]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10b      	bne.n	8004fb0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f043 0206 	orr.w	r2, r3, #6
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fbc:	b004      	add	sp, #16
 8004fbe:	4770      	bx	lr

08004fc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 0201 	bic.w	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d115      	bne.n	8005030 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005010:	200a      	movs	r0, #10
 8005012:	f7fc fc43 	bl	800189c <HAL_Delay>
      ms += 10U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	330a      	adds	r3, #10
 800501a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa25 	bl	800546c <USB_GetMode>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d01e      	beq.n	8005066 <USB_SetCurrentMode+0x84>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2bc7      	cmp	r3, #199	@ 0xc7
 800502c:	d9f0      	bls.n	8005010 <USB_SetCurrentMode+0x2e>
 800502e:	e01a      	b.n	8005066 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d115      	bne.n	8005062 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005042:	200a      	movs	r0, #10
 8005044:	f7fc fc2a 	bl	800189c <HAL_Delay>
      ms += 10U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	330a      	adds	r3, #10
 800504c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa0c 	bl	800546c <USB_GetMode>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <USB_SetCurrentMode+0x84>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2bc7      	cmp	r3, #199	@ 0xc7
 800505e:	d9f0      	bls.n	8005042 <USB_SetCurrentMode+0x60>
 8005060:	e001      	b.n	8005066 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e005      	b.n	8005072 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2bc8      	cmp	r3, #200	@ 0xc8
 800506a:	d101      	bne.n	8005070 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800507c:	b084      	sub	sp, #16
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800508a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e009      	b.n	80050b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3340      	adds	r3, #64	@ 0x40
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0e      	cmp	r3, #14
 80050b4:	d9f2      	bls.n	800509c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11c      	bne.n	80050f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e005      	b.n	8005104 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005110:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10d      	bne.n	8005134 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005120:	2100      	movs	r1, #0
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f968 	bl	80053f8 <USB_SetDevSpeed>
 8005128:	e008      	b.n	800513c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800512a:	2101      	movs	r1, #1
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f963 	bl	80053f8 <USB_SetDevSpeed>
 8005132:	e003      	b.n	800513c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005134:	2103      	movs	r1, #3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f95e 	bl	80053f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800513c:	2110      	movs	r1, #16
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8fa 	bl	8005338 <USB_FlushTxFifo>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f924 	bl	800539c <USB_FlushRxFifo>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005164:	461a      	mov	r2, r3
 8005166:	2300      	movs	r3, #0
 8005168:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005170:	461a      	mov	r2, r3
 8005172:	2300      	movs	r3, #0
 8005174:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e043      	b.n	8005210 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800519a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800519e:	d118      	bne.n	80051d2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e013      	b.n	80051e4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c8:	461a      	mov	r2, r3
 80051ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e008      	b.n	80051e4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051de:	461a      	mov	r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f0:	461a      	mov	r2, r3
 80051f2:	2300      	movs	r3, #0
 80051f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005202:	461a      	mov	r2, r3
 8005204:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3301      	adds	r3, #1
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005214:	461a      	mov	r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4293      	cmp	r3, r2
 800521a:	d3b5      	bcc.n	8005188 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	e043      	b.n	80052aa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005238:	d118      	bne.n	800526c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524c:	461a      	mov	r2, r3
 800524e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e013      	b.n	800527e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e008      	b.n	800527e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528a:	461a      	mov	r2, r3
 800528c:	2300      	movs	r3, #0
 800528e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3301      	adds	r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80052ae:	461a      	mov	r2, r3
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d3b5      	bcc.n	8005222 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <USB_DevInit+0x2b8>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f043 0208 	orr.w	r2, r3, #8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800530c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005310:	2b01      	cmp	r3, #1
 8005312:	d107      	bne.n	8005324 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005330:	b004      	add	sp, #16
 8005332:	4770      	bx	lr
 8005334:	803c3800 	.word	0x803c3800

08005338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005352:	d901      	bls.n	8005358 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e01b      	b.n	8005390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	daf2      	bge.n	8005346 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800537c:	d901      	bls.n	8005382 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e006      	b.n	8005390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b20      	cmp	r3, #32
 800538c:	d0f0      	beq.n	8005370 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b4:	d901      	bls.n	80053ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e018      	b.n	80053ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	daf2      	bge.n	80053a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2210      	movs	r2, #16
 80053ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053d8:	d901      	bls.n	80053de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e006      	b.n	80053ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d0f0      	beq.n	80053cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005444:	f023 0303 	bic.w	r3, r3, #3
 8005448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0301 	and.w	r3, r3, #1
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054a0:	d901      	bls.n	80054a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e022      	b.n	80054ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	daf2      	bge.n	8005494 <USB_CoreReset+0xc>

  count = 10U;
 80054ae:	230a      	movs	r3, #10
 80054b0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80054b2:	e002      	b.n	80054ba <USB_CoreReset+0x32>
  {
    count--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f9      	bne.n	80054b4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f043 0201 	orr.w	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054d8:	d901      	bls.n	80054de <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e006      	b.n	80054ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d0f0      	beq.n	80054cc <USB_CoreReset+0x44>

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <atoi>:
 80054f8:	220a      	movs	r2, #10
 80054fa:	2100      	movs	r1, #0
 80054fc:	f000 b87a 	b.w	80055f4 <strtol>

08005500 <_strtol_l.isra.0>:
 8005500:	2b24      	cmp	r3, #36	@ 0x24
 8005502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005506:	4686      	mov	lr, r0
 8005508:	4690      	mov	r8, r2
 800550a:	d801      	bhi.n	8005510 <_strtol_l.isra.0+0x10>
 800550c:	2b01      	cmp	r3, #1
 800550e:	d106      	bne.n	800551e <_strtol_l.isra.0+0x1e>
 8005510:	f000 f8c4 	bl	800569c <__errno>
 8005514:	2316      	movs	r3, #22
 8005516:	6003      	str	r3, [r0, #0]
 8005518:	2000      	movs	r0, #0
 800551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551e:	4834      	ldr	r0, [pc, #208]	@ (80055f0 <_strtol_l.isra.0+0xf0>)
 8005520:	460d      	mov	r5, r1
 8005522:	462a      	mov	r2, r5
 8005524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005528:	5d06      	ldrb	r6, [r0, r4]
 800552a:	f016 0608 	ands.w	r6, r6, #8
 800552e:	d1f8      	bne.n	8005522 <_strtol_l.isra.0+0x22>
 8005530:	2c2d      	cmp	r4, #45	@ 0x2d
 8005532:	d110      	bne.n	8005556 <_strtol_l.isra.0+0x56>
 8005534:	782c      	ldrb	r4, [r5, #0]
 8005536:	2601      	movs	r6, #1
 8005538:	1c95      	adds	r5, r2, #2
 800553a:	f033 0210 	bics.w	r2, r3, #16
 800553e:	d115      	bne.n	800556c <_strtol_l.isra.0+0x6c>
 8005540:	2c30      	cmp	r4, #48	@ 0x30
 8005542:	d10d      	bne.n	8005560 <_strtol_l.isra.0+0x60>
 8005544:	782a      	ldrb	r2, [r5, #0]
 8005546:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800554a:	2a58      	cmp	r2, #88	@ 0x58
 800554c:	d108      	bne.n	8005560 <_strtol_l.isra.0+0x60>
 800554e:	786c      	ldrb	r4, [r5, #1]
 8005550:	3502      	adds	r5, #2
 8005552:	2310      	movs	r3, #16
 8005554:	e00a      	b.n	800556c <_strtol_l.isra.0+0x6c>
 8005556:	2c2b      	cmp	r4, #43	@ 0x2b
 8005558:	bf04      	itt	eq
 800555a:	782c      	ldrbeq	r4, [r5, #0]
 800555c:	1c95      	addeq	r5, r2, #2
 800555e:	e7ec      	b.n	800553a <_strtol_l.isra.0+0x3a>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f6      	bne.n	8005552 <_strtol_l.isra.0+0x52>
 8005564:	2c30      	cmp	r4, #48	@ 0x30
 8005566:	bf14      	ite	ne
 8005568:	230a      	movne	r3, #10
 800556a:	2308      	moveq	r3, #8
 800556c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005570:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005574:	2200      	movs	r2, #0
 8005576:	fbbc f9f3 	udiv	r9, ip, r3
 800557a:	4610      	mov	r0, r2
 800557c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005580:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005584:	2f09      	cmp	r7, #9
 8005586:	d80f      	bhi.n	80055a8 <_strtol_l.isra.0+0xa8>
 8005588:	463c      	mov	r4, r7
 800558a:	42a3      	cmp	r3, r4
 800558c:	dd1b      	ble.n	80055c6 <_strtol_l.isra.0+0xc6>
 800558e:	1c57      	adds	r7, r2, #1
 8005590:	d007      	beq.n	80055a2 <_strtol_l.isra.0+0xa2>
 8005592:	4581      	cmp	r9, r0
 8005594:	d314      	bcc.n	80055c0 <_strtol_l.isra.0+0xc0>
 8005596:	d101      	bne.n	800559c <_strtol_l.isra.0+0x9c>
 8005598:	45a2      	cmp	sl, r4
 800559a:	db11      	blt.n	80055c0 <_strtol_l.isra.0+0xc0>
 800559c:	fb00 4003 	mla	r0, r0, r3, r4
 80055a0:	2201      	movs	r2, #1
 80055a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055a6:	e7eb      	b.n	8005580 <_strtol_l.isra.0+0x80>
 80055a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80055ac:	2f19      	cmp	r7, #25
 80055ae:	d801      	bhi.n	80055b4 <_strtol_l.isra.0+0xb4>
 80055b0:	3c37      	subs	r4, #55	@ 0x37
 80055b2:	e7ea      	b.n	800558a <_strtol_l.isra.0+0x8a>
 80055b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80055b8:	2f19      	cmp	r7, #25
 80055ba:	d804      	bhi.n	80055c6 <_strtol_l.isra.0+0xc6>
 80055bc:	3c57      	subs	r4, #87	@ 0x57
 80055be:	e7e4      	b.n	800558a <_strtol_l.isra.0+0x8a>
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	e7ed      	b.n	80055a2 <_strtol_l.isra.0+0xa2>
 80055c6:	1c53      	adds	r3, r2, #1
 80055c8:	d108      	bne.n	80055dc <_strtol_l.isra.0+0xdc>
 80055ca:	2322      	movs	r3, #34	@ 0x22
 80055cc:	f8ce 3000 	str.w	r3, [lr]
 80055d0:	4660      	mov	r0, ip
 80055d2:	f1b8 0f00 	cmp.w	r8, #0
 80055d6:	d0a0      	beq.n	800551a <_strtol_l.isra.0+0x1a>
 80055d8:	1e69      	subs	r1, r5, #1
 80055da:	e006      	b.n	80055ea <_strtol_l.isra.0+0xea>
 80055dc:	b106      	cbz	r6, 80055e0 <_strtol_l.isra.0+0xe0>
 80055de:	4240      	negs	r0, r0
 80055e0:	f1b8 0f00 	cmp.w	r8, #0
 80055e4:	d099      	beq.n	800551a <_strtol_l.isra.0+0x1a>
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	d1f6      	bne.n	80055d8 <_strtol_l.isra.0+0xd8>
 80055ea:	f8c8 1000 	str.w	r1, [r8]
 80055ee:	e794      	b.n	800551a <_strtol_l.isra.0+0x1a>
 80055f0:	080060b1 	.word	0x080060b1

080055f4 <strtol>:
 80055f4:	4613      	mov	r3, r2
 80055f6:	460a      	mov	r2, r1
 80055f8:	4601      	mov	r1, r0
 80055fa:	4802      	ldr	r0, [pc, #8]	@ (8005604 <strtol+0x10>)
 80055fc:	6800      	ldr	r0, [r0, #0]
 80055fe:	f7ff bf7f 	b.w	8005500 <_strtol_l.isra.0>
 8005602:	bf00      	nop
 8005604:	2000000c 	.word	0x2000000c

08005608 <siprintf>:
 8005608:	b40e      	push	{r1, r2, r3}
 800560a:	b510      	push	{r4, lr}
 800560c:	b09d      	sub	sp, #116	@ 0x74
 800560e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005610:	9002      	str	r0, [sp, #8]
 8005612:	9006      	str	r0, [sp, #24]
 8005614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005618:	480a      	ldr	r0, [pc, #40]	@ (8005644 <siprintf+0x3c>)
 800561a:	9107      	str	r1, [sp, #28]
 800561c:	9104      	str	r1, [sp, #16]
 800561e:	490a      	ldr	r1, [pc, #40]	@ (8005648 <siprintf+0x40>)
 8005620:	f853 2b04 	ldr.w	r2, [r3], #4
 8005624:	9105      	str	r1, [sp, #20]
 8005626:	2400      	movs	r4, #0
 8005628:	a902      	add	r1, sp, #8
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005630:	f000 f9b4 	bl	800599c <_svfiprintf_r>
 8005634:	9b02      	ldr	r3, [sp, #8]
 8005636:	701c      	strb	r4, [r3, #0]
 8005638:	b01d      	add	sp, #116	@ 0x74
 800563a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563e:	b003      	add	sp, #12
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000000c 	.word	0x2000000c
 8005648:	ffff0208 	.word	0xffff0208

0800564c <memset>:
 800564c:	4402      	add	r2, r0
 800564e:	4603      	mov	r3, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <strchr>:
 800565c:	b2c9      	uxtb	r1, r1
 800565e:	4603      	mov	r3, r0
 8005660:	4618      	mov	r0, r3
 8005662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005666:	b112      	cbz	r2, 800566e <strchr+0x12>
 8005668:	428a      	cmp	r2, r1
 800566a:	d1f9      	bne.n	8005660 <strchr+0x4>
 800566c:	4770      	bx	lr
 800566e:	2900      	cmp	r1, #0
 8005670:	bf18      	it	ne
 8005672:	2000      	movne	r0, #0
 8005674:	4770      	bx	lr

08005676 <strncmp>:
 8005676:	b510      	push	{r4, lr}
 8005678:	b16a      	cbz	r2, 8005696 <strncmp+0x20>
 800567a:	3901      	subs	r1, #1
 800567c:	1884      	adds	r4, r0, r2
 800567e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005682:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005686:	429a      	cmp	r2, r3
 8005688:	d103      	bne.n	8005692 <strncmp+0x1c>
 800568a:	42a0      	cmp	r0, r4
 800568c:	d001      	beq.n	8005692 <strncmp+0x1c>
 800568e:	2a00      	cmp	r2, #0
 8005690:	d1f5      	bne.n	800567e <strncmp+0x8>
 8005692:	1ad0      	subs	r0, r2, r3
 8005694:	bd10      	pop	{r4, pc}
 8005696:	4610      	mov	r0, r2
 8005698:	e7fc      	b.n	8005694 <strncmp+0x1e>
	...

0800569c <__errno>:
 800569c:	4b01      	ldr	r3, [pc, #4]	@ (80056a4 <__errno+0x8>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4d0d      	ldr	r5, [pc, #52]	@ (80056e0 <__libc_init_array+0x38>)
 80056ac:	4c0d      	ldr	r4, [pc, #52]	@ (80056e4 <__libc_init_array+0x3c>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	2600      	movs	r6, #0
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	4d0b      	ldr	r5, [pc, #44]	@ (80056e8 <__libc_init_array+0x40>)
 80056ba:	4c0c      	ldr	r4, [pc, #48]	@ (80056ec <__libc_init_array+0x44>)
 80056bc:	f000 fc64 	bl	8005f88 <_init>
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	2600      	movs	r6, #0
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	080061ec 	.word	0x080061ec
 80056e4:	080061ec 	.word	0x080061ec
 80056e8:	080061ec 	.word	0x080061ec
 80056ec:	080061f0 	.word	0x080061f0

080056f0 <__retarget_lock_acquire_recursive>:
 80056f0:	4770      	bx	lr

080056f2 <__retarget_lock_release_recursive>:
 80056f2:	4770      	bx	lr

080056f4 <_free_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4605      	mov	r5, r0
 80056f8:	2900      	cmp	r1, #0
 80056fa:	d041      	beq.n	8005780 <_free_r+0x8c>
 80056fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005700:	1f0c      	subs	r4, r1, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfb8      	it	lt
 8005706:	18e4      	addlt	r4, r4, r3
 8005708:	f000 f8e0 	bl	80058cc <__malloc_lock>
 800570c:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <_free_r+0x90>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	b933      	cbnz	r3, 8005720 <_free_r+0x2c>
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	6014      	str	r4, [r2, #0]
 8005716:	4628      	mov	r0, r5
 8005718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571c:	f000 b8dc 	b.w	80058d8 <__malloc_unlock>
 8005720:	42a3      	cmp	r3, r4
 8005722:	d908      	bls.n	8005736 <_free_r+0x42>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	1821      	adds	r1, r4, r0
 8005728:	428b      	cmp	r3, r1
 800572a:	bf01      	itttt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	1809      	addeq	r1, r1, r0
 8005732:	6021      	streq	r1, [r4, #0]
 8005734:	e7ed      	b.n	8005712 <_free_r+0x1e>
 8005736:	461a      	mov	r2, r3
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b10b      	cbz	r3, 8005740 <_free_r+0x4c>
 800573c:	42a3      	cmp	r3, r4
 800573e:	d9fa      	bls.n	8005736 <_free_r+0x42>
 8005740:	6811      	ldr	r1, [r2, #0]
 8005742:	1850      	adds	r0, r2, r1
 8005744:	42a0      	cmp	r0, r4
 8005746:	d10b      	bne.n	8005760 <_free_r+0x6c>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	4401      	add	r1, r0
 800574c:	1850      	adds	r0, r2, r1
 800574e:	4283      	cmp	r3, r0
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	d1e0      	bne.n	8005716 <_free_r+0x22>
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	6053      	str	r3, [r2, #4]
 800575a:	4408      	add	r0, r1
 800575c:	6010      	str	r0, [r2, #0]
 800575e:	e7da      	b.n	8005716 <_free_r+0x22>
 8005760:	d902      	bls.n	8005768 <_free_r+0x74>
 8005762:	230c      	movs	r3, #12
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	e7d6      	b.n	8005716 <_free_r+0x22>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428b      	cmp	r3, r1
 800576e:	bf04      	itt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	bf04      	itt	eq
 8005778:	1809      	addeq	r1, r1, r0
 800577a:	6021      	streq	r1, [r4, #0]
 800577c:	6054      	str	r4, [r2, #4]
 800577e:	e7ca      	b.n	8005716 <_free_r+0x22>
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	20000858 	.word	0x20000858

08005788 <sbrk_aligned>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4e0f      	ldr	r6, [pc, #60]	@ (80057c8 <sbrk_aligned+0x40>)
 800578c:	460c      	mov	r4, r1
 800578e:	6831      	ldr	r1, [r6, #0]
 8005790:	4605      	mov	r5, r0
 8005792:	b911      	cbnz	r1, 800579a <sbrk_aligned+0x12>
 8005794:	f000 fba4 	bl	8005ee0 <_sbrk_r>
 8005798:	6030      	str	r0, [r6, #0]
 800579a:	4621      	mov	r1, r4
 800579c:	4628      	mov	r0, r5
 800579e:	f000 fb9f 	bl	8005ee0 <_sbrk_r>
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	d103      	bne.n	80057ae <sbrk_aligned+0x26>
 80057a6:	f04f 34ff 	mov.w	r4, #4294967295
 80057aa:	4620      	mov	r0, r4
 80057ac:	bd70      	pop	{r4, r5, r6, pc}
 80057ae:	1cc4      	adds	r4, r0, #3
 80057b0:	f024 0403 	bic.w	r4, r4, #3
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d0f8      	beq.n	80057aa <sbrk_aligned+0x22>
 80057b8:	1a21      	subs	r1, r4, r0
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 fb90 	bl	8005ee0 <_sbrk_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d1f2      	bne.n	80057aa <sbrk_aligned+0x22>
 80057c4:	e7ef      	b.n	80057a6 <sbrk_aligned+0x1e>
 80057c6:	bf00      	nop
 80057c8:	20000854 	.word	0x20000854

080057cc <_malloc_r>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	1ccd      	adds	r5, r1, #3
 80057d2:	f025 0503 	bic.w	r5, r5, #3
 80057d6:	3508      	adds	r5, #8
 80057d8:	2d0c      	cmp	r5, #12
 80057da:	bf38      	it	cc
 80057dc:	250c      	movcc	r5, #12
 80057de:	2d00      	cmp	r5, #0
 80057e0:	4606      	mov	r6, r0
 80057e2:	db01      	blt.n	80057e8 <_malloc_r+0x1c>
 80057e4:	42a9      	cmp	r1, r5
 80057e6:	d904      	bls.n	80057f2 <_malloc_r+0x26>
 80057e8:	230c      	movs	r3, #12
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	2000      	movs	r0, #0
 80057ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058c8 <_malloc_r+0xfc>
 80057f6:	f000 f869 	bl	80058cc <__malloc_lock>
 80057fa:	f8d8 3000 	ldr.w	r3, [r8]
 80057fe:	461c      	mov	r4, r3
 8005800:	bb44      	cbnz	r4, 8005854 <_malloc_r+0x88>
 8005802:	4629      	mov	r1, r5
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff ffbf 	bl	8005788 <sbrk_aligned>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	4604      	mov	r4, r0
 800580e:	d158      	bne.n	80058c2 <_malloc_r+0xf6>
 8005810:	f8d8 4000 	ldr.w	r4, [r8]
 8005814:	4627      	mov	r7, r4
 8005816:	2f00      	cmp	r7, #0
 8005818:	d143      	bne.n	80058a2 <_malloc_r+0xd6>
 800581a:	2c00      	cmp	r4, #0
 800581c:	d04b      	beq.n	80058b6 <_malloc_r+0xea>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	4639      	mov	r1, r7
 8005822:	4630      	mov	r0, r6
 8005824:	eb04 0903 	add.w	r9, r4, r3
 8005828:	f000 fb5a 	bl	8005ee0 <_sbrk_r>
 800582c:	4581      	cmp	r9, r0
 800582e:	d142      	bne.n	80058b6 <_malloc_r+0xea>
 8005830:	6821      	ldr	r1, [r4, #0]
 8005832:	1a6d      	subs	r5, r5, r1
 8005834:	4629      	mov	r1, r5
 8005836:	4630      	mov	r0, r6
 8005838:	f7ff ffa6 	bl	8005788 <sbrk_aligned>
 800583c:	3001      	adds	r0, #1
 800583e:	d03a      	beq.n	80058b6 <_malloc_r+0xea>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	442b      	add	r3, r5
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	f8d8 3000 	ldr.w	r3, [r8]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	bb62      	cbnz	r2, 80058a8 <_malloc_r+0xdc>
 800584e:	f8c8 7000 	str.w	r7, [r8]
 8005852:	e00f      	b.n	8005874 <_malloc_r+0xa8>
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	1b52      	subs	r2, r2, r5
 8005858:	d420      	bmi.n	800589c <_malloc_r+0xd0>
 800585a:	2a0b      	cmp	r2, #11
 800585c:	d917      	bls.n	800588e <_malloc_r+0xc2>
 800585e:	1961      	adds	r1, r4, r5
 8005860:	42a3      	cmp	r3, r4
 8005862:	6025      	str	r5, [r4, #0]
 8005864:	bf18      	it	ne
 8005866:	6059      	strne	r1, [r3, #4]
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	bf08      	it	eq
 800586c:	f8c8 1000 	streq.w	r1, [r8]
 8005870:	5162      	str	r2, [r4, r5]
 8005872:	604b      	str	r3, [r1, #4]
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f82f 	bl	80058d8 <__malloc_unlock>
 800587a:	f104 000b 	add.w	r0, r4, #11
 800587e:	1d23      	adds	r3, r4, #4
 8005880:	f020 0007 	bic.w	r0, r0, #7
 8005884:	1ac2      	subs	r2, r0, r3
 8005886:	bf1c      	itt	ne
 8005888:	1a1b      	subne	r3, r3, r0
 800588a:	50a3      	strne	r3, [r4, r2]
 800588c:	e7af      	b.n	80057ee <_malloc_r+0x22>
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	42a3      	cmp	r3, r4
 8005892:	bf0c      	ite	eq
 8005894:	f8c8 2000 	streq.w	r2, [r8]
 8005898:	605a      	strne	r2, [r3, #4]
 800589a:	e7eb      	b.n	8005874 <_malloc_r+0xa8>
 800589c:	4623      	mov	r3, r4
 800589e:	6864      	ldr	r4, [r4, #4]
 80058a0:	e7ae      	b.n	8005800 <_malloc_r+0x34>
 80058a2:	463c      	mov	r4, r7
 80058a4:	687f      	ldr	r7, [r7, #4]
 80058a6:	e7b6      	b.n	8005816 <_malloc_r+0x4a>
 80058a8:	461a      	mov	r2, r3
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d1fb      	bne.n	80058a8 <_malloc_r+0xdc>
 80058b0:	2300      	movs	r3, #0
 80058b2:	6053      	str	r3, [r2, #4]
 80058b4:	e7de      	b.n	8005874 <_malloc_r+0xa8>
 80058b6:	230c      	movs	r3, #12
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 f80c 	bl	80058d8 <__malloc_unlock>
 80058c0:	e794      	b.n	80057ec <_malloc_r+0x20>
 80058c2:	6005      	str	r5, [r0, #0]
 80058c4:	e7d6      	b.n	8005874 <_malloc_r+0xa8>
 80058c6:	bf00      	nop
 80058c8:	20000858 	.word	0x20000858

080058cc <__malloc_lock>:
 80058cc:	4801      	ldr	r0, [pc, #4]	@ (80058d4 <__malloc_lock+0x8>)
 80058ce:	f7ff bf0f 	b.w	80056f0 <__retarget_lock_acquire_recursive>
 80058d2:	bf00      	nop
 80058d4:	20000850 	.word	0x20000850

080058d8 <__malloc_unlock>:
 80058d8:	4801      	ldr	r0, [pc, #4]	@ (80058e0 <__malloc_unlock+0x8>)
 80058da:	f7ff bf0a 	b.w	80056f2 <__retarget_lock_release_recursive>
 80058de:	bf00      	nop
 80058e0:	20000850 	.word	0x20000850

080058e4 <__ssputs_r>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	688e      	ldr	r6, [r1, #8]
 80058ea:	461f      	mov	r7, r3
 80058ec:	42be      	cmp	r6, r7
 80058ee:	680b      	ldr	r3, [r1, #0]
 80058f0:	4682      	mov	sl, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4690      	mov	r8, r2
 80058f6:	d82d      	bhi.n	8005954 <__ssputs_r+0x70>
 80058f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005900:	d026      	beq.n	8005950 <__ssputs_r+0x6c>
 8005902:	6965      	ldr	r5, [r4, #20]
 8005904:	6909      	ldr	r1, [r1, #16]
 8005906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800590a:	eba3 0901 	sub.w	r9, r3, r1
 800590e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005912:	1c7b      	adds	r3, r7, #1
 8005914:	444b      	add	r3, r9
 8005916:	106d      	asrs	r5, r5, #1
 8005918:	429d      	cmp	r5, r3
 800591a:	bf38      	it	cc
 800591c:	461d      	movcc	r5, r3
 800591e:	0553      	lsls	r3, r2, #21
 8005920:	d527      	bpl.n	8005972 <__ssputs_r+0x8e>
 8005922:	4629      	mov	r1, r5
 8005924:	f7ff ff52 	bl	80057cc <_malloc_r>
 8005928:	4606      	mov	r6, r0
 800592a:	b360      	cbz	r0, 8005986 <__ssputs_r+0xa2>
 800592c:	6921      	ldr	r1, [r4, #16]
 800592e:	464a      	mov	r2, r9
 8005930:	f000 fae6 	bl	8005f00 <memcpy>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800593a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	6126      	str	r6, [r4, #16]
 8005942:	6165      	str	r5, [r4, #20]
 8005944:	444e      	add	r6, r9
 8005946:	eba5 0509 	sub.w	r5, r5, r9
 800594a:	6026      	str	r6, [r4, #0]
 800594c:	60a5      	str	r5, [r4, #8]
 800594e:	463e      	mov	r6, r7
 8005950:	42be      	cmp	r6, r7
 8005952:	d900      	bls.n	8005956 <__ssputs_r+0x72>
 8005954:	463e      	mov	r6, r7
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	4632      	mov	r2, r6
 800595a:	4641      	mov	r1, r8
 800595c:	f000 faa6 	bl	8005eac <memmove>
 8005960:	68a3      	ldr	r3, [r4, #8]
 8005962:	1b9b      	subs	r3, r3, r6
 8005964:	60a3      	str	r3, [r4, #8]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	4433      	add	r3, r6
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	2000      	movs	r0, #0
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	462a      	mov	r2, r5
 8005974:	f000 fad2 	bl	8005f1c <_realloc_r>
 8005978:	4606      	mov	r6, r0
 800597a:	2800      	cmp	r0, #0
 800597c:	d1e0      	bne.n	8005940 <__ssputs_r+0x5c>
 800597e:	6921      	ldr	r1, [r4, #16]
 8005980:	4650      	mov	r0, sl
 8005982:	f7ff feb7 	bl	80056f4 <_free_r>
 8005986:	230c      	movs	r3, #12
 8005988:	f8ca 3000 	str.w	r3, [sl]
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	e7e9      	b.n	800596e <__ssputs_r+0x8a>
	...

0800599c <_svfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	4698      	mov	r8, r3
 80059a2:	898b      	ldrh	r3, [r1, #12]
 80059a4:	061b      	lsls	r3, r3, #24
 80059a6:	b09d      	sub	sp, #116	@ 0x74
 80059a8:	4607      	mov	r7, r0
 80059aa:	460d      	mov	r5, r1
 80059ac:	4614      	mov	r4, r2
 80059ae:	d510      	bpl.n	80059d2 <_svfiprintf_r+0x36>
 80059b0:	690b      	ldr	r3, [r1, #16]
 80059b2:	b973      	cbnz	r3, 80059d2 <_svfiprintf_r+0x36>
 80059b4:	2140      	movs	r1, #64	@ 0x40
 80059b6:	f7ff ff09 	bl	80057cc <_malloc_r>
 80059ba:	6028      	str	r0, [r5, #0]
 80059bc:	6128      	str	r0, [r5, #16]
 80059be:	b930      	cbnz	r0, 80059ce <_svfiprintf_r+0x32>
 80059c0:	230c      	movs	r3, #12
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	b01d      	add	sp, #116	@ 0x74
 80059ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ce:	2340      	movs	r3, #64	@ 0x40
 80059d0:	616b      	str	r3, [r5, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d6:	2320      	movs	r3, #32
 80059d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e0:	2330      	movs	r3, #48	@ 0x30
 80059e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b80 <_svfiprintf_r+0x1e4>
 80059e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059ea:	f04f 0901 	mov.w	r9, #1
 80059ee:	4623      	mov	r3, r4
 80059f0:	469a      	mov	sl, r3
 80059f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f6:	b10a      	cbz	r2, 80059fc <_svfiprintf_r+0x60>
 80059f8:	2a25      	cmp	r2, #37	@ 0x25
 80059fa:	d1f9      	bne.n	80059f0 <_svfiprintf_r+0x54>
 80059fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005a00:	d00b      	beq.n	8005a1a <_svfiprintf_r+0x7e>
 8005a02:	465b      	mov	r3, fp
 8005a04:	4622      	mov	r2, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff ff6b 	bl	80058e4 <__ssputs_r>
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f000 80a7 	beq.w	8005b62 <_svfiprintf_r+0x1c6>
 8005a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a16:	445a      	add	r2, fp
 8005a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 809f 	beq.w	8005b62 <_svfiprintf_r+0x1c6>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2e:	f10a 0a01 	add.w	sl, sl, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	9307      	str	r3, [sp, #28]
 8005a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a3c:	4654      	mov	r4, sl
 8005a3e:	2205      	movs	r2, #5
 8005a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a44:	484e      	ldr	r0, [pc, #312]	@ (8005b80 <_svfiprintf_r+0x1e4>)
 8005a46:	f7fa fbfb 	bl	8000240 <memchr>
 8005a4a:	9a04      	ldr	r2, [sp, #16]
 8005a4c:	b9d8      	cbnz	r0, 8005a86 <_svfiprintf_r+0xea>
 8005a4e:	06d0      	lsls	r0, r2, #27
 8005a50:	bf44      	itt	mi
 8005a52:	2320      	movmi	r3, #32
 8005a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a58:	0711      	lsls	r1, r2, #28
 8005a5a:	bf44      	itt	mi
 8005a5c:	232b      	movmi	r3, #43	@ 0x2b
 8005a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a62:	f89a 3000 	ldrb.w	r3, [sl]
 8005a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a68:	d015      	beq.n	8005a96 <_svfiprintf_r+0xfa>
 8005a6a:	9a07      	ldr	r2, [sp, #28]
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f04f 0c0a 	mov.w	ip, #10
 8005a74:	4621      	mov	r1, r4
 8005a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7a:	3b30      	subs	r3, #48	@ 0x30
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d94b      	bls.n	8005b18 <_svfiprintf_r+0x17c>
 8005a80:	b1b0      	cbz	r0, 8005ab0 <_svfiprintf_r+0x114>
 8005a82:	9207      	str	r2, [sp, #28]
 8005a84:	e014      	b.n	8005ab0 <_svfiprintf_r+0x114>
 8005a86:	eba0 0308 	sub.w	r3, r0, r8
 8005a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	46a2      	mov	sl, r4
 8005a94:	e7d2      	b.n	8005a3c <_svfiprintf_r+0xa0>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	9103      	str	r1, [sp, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bfbb      	ittet	lt
 8005aa2:	425b      	neglt	r3, r3
 8005aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa8:	9307      	strge	r3, [sp, #28]
 8005aaa:	9307      	strlt	r3, [sp, #28]
 8005aac:	bfb8      	it	lt
 8005aae:	9204      	strlt	r2, [sp, #16]
 8005ab0:	7823      	ldrb	r3, [r4, #0]
 8005ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ab4:	d10a      	bne.n	8005acc <_svfiprintf_r+0x130>
 8005ab6:	7863      	ldrb	r3, [r4, #1]
 8005ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aba:	d132      	bne.n	8005b22 <_svfiprintf_r+0x186>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ac8:	3402      	adds	r4, #2
 8005aca:	9305      	str	r3, [sp, #20]
 8005acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b90 <_svfiprintf_r+0x1f4>
 8005ad0:	7821      	ldrb	r1, [r4, #0]
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	4650      	mov	r0, sl
 8005ad6:	f7fa fbb3 	bl	8000240 <memchr>
 8005ada:	b138      	cbz	r0, 8005aec <_svfiprintf_r+0x150>
 8005adc:	9b04      	ldr	r3, [sp, #16]
 8005ade:	eba0 000a 	sub.w	r0, r0, sl
 8005ae2:	2240      	movs	r2, #64	@ 0x40
 8005ae4:	4082      	lsls	r2, r0
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	3401      	adds	r4, #1
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af0:	4824      	ldr	r0, [pc, #144]	@ (8005b84 <_svfiprintf_r+0x1e8>)
 8005af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005af6:	2206      	movs	r2, #6
 8005af8:	f7fa fba2 	bl	8000240 <memchr>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d036      	beq.n	8005b6e <_svfiprintf_r+0x1d2>
 8005b00:	4b21      	ldr	r3, [pc, #132]	@ (8005b88 <_svfiprintf_r+0x1ec>)
 8005b02:	bb1b      	cbnz	r3, 8005b4c <_svfiprintf_r+0x1b0>
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	3307      	adds	r3, #7
 8005b08:	f023 0307 	bic.w	r3, r3, #7
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	9303      	str	r3, [sp, #12]
 8005b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b12:	4433      	add	r3, r6
 8005b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b16:	e76a      	b.n	80059ee <_svfiprintf_r+0x52>
 8005b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	2001      	movs	r0, #1
 8005b20:	e7a8      	b.n	8005a74 <_svfiprintf_r+0xd8>
 8005b22:	2300      	movs	r3, #0
 8005b24:	3401      	adds	r4, #1
 8005b26:	9305      	str	r3, [sp, #20]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f04f 0c0a 	mov.w	ip, #10
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b34:	3a30      	subs	r2, #48	@ 0x30
 8005b36:	2a09      	cmp	r2, #9
 8005b38:	d903      	bls.n	8005b42 <_svfiprintf_r+0x1a6>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0c6      	beq.n	8005acc <_svfiprintf_r+0x130>
 8005b3e:	9105      	str	r1, [sp, #20]
 8005b40:	e7c4      	b.n	8005acc <_svfiprintf_r+0x130>
 8005b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b46:	4604      	mov	r4, r0
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e7f0      	b.n	8005b2e <_svfiprintf_r+0x192>
 8005b4c:	ab03      	add	r3, sp, #12
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	462a      	mov	r2, r5
 8005b52:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <_svfiprintf_r+0x1f0>)
 8005b54:	a904      	add	r1, sp, #16
 8005b56:	4638      	mov	r0, r7
 8005b58:	f3af 8000 	nop.w
 8005b5c:	1c42      	adds	r2, r0, #1
 8005b5e:	4606      	mov	r6, r0
 8005b60:	d1d6      	bne.n	8005b10 <_svfiprintf_r+0x174>
 8005b62:	89ab      	ldrh	r3, [r5, #12]
 8005b64:	065b      	lsls	r3, r3, #25
 8005b66:	f53f af2d 	bmi.w	80059c4 <_svfiprintf_r+0x28>
 8005b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b6c:	e72c      	b.n	80059c8 <_svfiprintf_r+0x2c>
 8005b6e:	ab03      	add	r3, sp, #12
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	462a      	mov	r2, r5
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <_svfiprintf_r+0x1f0>)
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f000 f879 	bl	8005c70 <_printf_i>
 8005b7e:	e7ed      	b.n	8005b5c <_svfiprintf_r+0x1c0>
 8005b80:	080061b1 	.word	0x080061b1
 8005b84:	080061bb 	.word	0x080061bb
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	080058e5 	.word	0x080058e5
 8005b90:	080061b7 	.word	0x080061b7

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4698      	mov	r8, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005be0:	6822      	ldr	r2, [r4, #0]
 8005be2:	3b00      	subs	r3, #0
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c8      	blx	r9
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	6922      	ldr	r2, [r4, #16]
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	bf02      	ittt	eq
 8005c06:	68e5      	ldreq	r5, [r4, #12]
 8005c08:	6833      	ldreq	r3, [r6, #0]
 8005c0a:	1aed      	subeq	r5, r5, r3
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4641      	mov	r1, r8
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c8      	blx	r9
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	@ 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4641      	mov	r1, r8
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c8      	blx	r9
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	7e0f      	ldrb	r7, [r1, #24]
 8005c76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c78:	2f78      	cmp	r7, #120	@ 0x78
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	469a      	mov	sl, r3
 8005c82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	@ 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d1 	beq.w	8005e34 <_printf_i+0x1c4>
 8005c92:	2f58      	cmp	r7, #88	@ 0x58
 8005c94:	f000 80b8 	beq.w	8005e08 <_printf_i+0x198>
 8005c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a101      	add	r1, pc, #4	@ (adr r1, 8005cb0 <_printf_i+0x40>)
 8005cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e1b 	.word	0x08005e1b
 8005ce0:	08005d47 	.word	0x08005d47
 8005ce4:	08005dd5 	.word	0x08005dd5
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e3d 	.word	0x08005e3d
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d47 	.word	0x08005d47
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005ddd 	.word	0x08005ddd
 8005d08:	6833      	ldr	r3, [r6, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6032      	str	r2, [r6, #0]
 8005d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e09c      	b.n	8005e56 <_printf_i+0x1e6>
 8005d1c:	6833      	ldr	r3, [r6, #0]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1d19      	adds	r1, r3, #4
 8005d22:	6031      	str	r1, [r6, #0]
 8005d24:	0606      	lsls	r6, r0, #24
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0xbc>
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	e003      	b.n	8005d34 <_printf_i+0xc4>
 8005d2c:	0645      	lsls	r5, r0, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0xb8>
 8005d30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	da03      	bge.n	8005d40 <_printf_i+0xd0>
 8005d38:	232d      	movs	r3, #45	@ 0x2d
 8005d3a:	426d      	negs	r5, r5
 8005d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d40:	4858      	ldr	r0, [pc, #352]	@ (8005ea4 <_printf_i+0x234>)
 8005d42:	230a      	movs	r3, #10
 8005d44:	e011      	b.n	8005d6a <_printf_i+0xfa>
 8005d46:	6821      	ldr	r1, [r4, #0]
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	0608      	lsls	r0, r1, #24
 8005d4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d50:	d402      	bmi.n	8005d58 <_printf_i+0xe8>
 8005d52:	0649      	lsls	r1, r1, #25
 8005d54:	bf48      	it	mi
 8005d56:	b2ad      	uxthmi	r5, r5
 8005d58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d5a:	4852      	ldr	r0, [pc, #328]	@ (8005ea4 <_printf_i+0x234>)
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	bf14      	ite	ne
 8005d60:	230a      	movne	r3, #10
 8005d62:	2308      	moveq	r3, #8
 8005d64:	2100      	movs	r1, #0
 8005d66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d6a:	6866      	ldr	r6, [r4, #4]
 8005d6c:	60a6      	str	r6, [r4, #8]
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	db05      	blt.n	8005d7e <_printf_i+0x10e>
 8005d72:	6821      	ldr	r1, [r4, #0]
 8005d74:	432e      	orrs	r6, r5
 8005d76:	f021 0104 	bic.w	r1, r1, #4
 8005d7a:	6021      	str	r1, [r4, #0]
 8005d7c:	d04b      	beq.n	8005e16 <_printf_i+0x1a6>
 8005d7e:	4616      	mov	r6, r2
 8005d80:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d84:	fb03 5711 	mls	r7, r3, r1, r5
 8005d88:	5dc7      	ldrb	r7, [r0, r7]
 8005d8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d8e:	462f      	mov	r7, r5
 8005d90:	42bb      	cmp	r3, r7
 8005d92:	460d      	mov	r5, r1
 8005d94:	d9f4      	bls.n	8005d80 <_printf_i+0x110>
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d10b      	bne.n	8005db2 <_printf_i+0x142>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	07df      	lsls	r7, r3, #31
 8005d9e:	d508      	bpl.n	8005db2 <_printf_i+0x142>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	6861      	ldr	r1, [r4, #4]
 8005da4:	4299      	cmp	r1, r3
 8005da6:	bfde      	ittt	le
 8005da8:	2330      	movle	r3, #48	@ 0x30
 8005daa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005db2:	1b92      	subs	r2, r2, r6
 8005db4:	6122      	str	r2, [r4, #16]
 8005db6:	f8cd a000 	str.w	sl, [sp]
 8005dba:	464b      	mov	r3, r9
 8005dbc:	aa03      	add	r2, sp, #12
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	f7ff fee7 	bl	8005b94 <_printf_common>
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d14a      	bne.n	8005e60 <_printf_i+0x1f0>
 8005dca:	f04f 30ff 	mov.w	r0, #4294967295
 8005dce:	b004      	add	sp, #16
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	f043 0320 	orr.w	r3, r3, #32
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	4832      	ldr	r0, [pc, #200]	@ (8005ea8 <_printf_i+0x238>)
 8005dde:	2778      	movs	r7, #120	@ 0x78
 8005de0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	6831      	ldr	r1, [r6, #0]
 8005de8:	061f      	lsls	r7, r3, #24
 8005dea:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dee:	d402      	bmi.n	8005df6 <_printf_i+0x186>
 8005df0:	065f      	lsls	r7, r3, #25
 8005df2:	bf48      	it	mi
 8005df4:	b2ad      	uxthmi	r5, r5
 8005df6:	6031      	str	r1, [r6, #0]
 8005df8:	07d9      	lsls	r1, r3, #31
 8005dfa:	bf44      	itt	mi
 8005dfc:	f043 0320 	orrmi.w	r3, r3, #32
 8005e00:	6023      	strmi	r3, [r4, #0]
 8005e02:	b11d      	cbz	r5, 8005e0c <_printf_i+0x19c>
 8005e04:	2310      	movs	r3, #16
 8005e06:	e7ad      	b.n	8005d64 <_printf_i+0xf4>
 8005e08:	4826      	ldr	r0, [pc, #152]	@ (8005ea4 <_printf_i+0x234>)
 8005e0a:	e7e9      	b.n	8005de0 <_printf_i+0x170>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f023 0320 	bic.w	r3, r3, #32
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	e7f6      	b.n	8005e04 <_printf_i+0x194>
 8005e16:	4616      	mov	r6, r2
 8005e18:	e7bd      	b.n	8005d96 <_printf_i+0x126>
 8005e1a:	6833      	ldr	r3, [r6, #0]
 8005e1c:	6825      	ldr	r5, [r4, #0]
 8005e1e:	6961      	ldr	r1, [r4, #20]
 8005e20:	1d18      	adds	r0, r3, #4
 8005e22:	6030      	str	r0, [r6, #0]
 8005e24:	062e      	lsls	r6, r5, #24
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	d501      	bpl.n	8005e2e <_printf_i+0x1be>
 8005e2a:	6019      	str	r1, [r3, #0]
 8005e2c:	e002      	b.n	8005e34 <_printf_i+0x1c4>
 8005e2e:	0668      	lsls	r0, r5, #25
 8005e30:	d5fb      	bpl.n	8005e2a <_printf_i+0x1ba>
 8005e32:	8019      	strh	r1, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	4616      	mov	r6, r2
 8005e3a:	e7bc      	b.n	8005db6 <_printf_i+0x146>
 8005e3c:	6833      	ldr	r3, [r6, #0]
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	6032      	str	r2, [r6, #0]
 8005e42:	681e      	ldr	r6, [r3, #0]
 8005e44:	6862      	ldr	r2, [r4, #4]
 8005e46:	2100      	movs	r1, #0
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7fa f9f9 	bl	8000240 <memchr>
 8005e4e:	b108      	cbz	r0, 8005e54 <_printf_i+0x1e4>
 8005e50:	1b80      	subs	r0, r0, r6
 8005e52:	6060      	str	r0, [r4, #4]
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	6123      	str	r3, [r4, #16]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e5e:	e7aa      	b.n	8005db6 <_printf_i+0x146>
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	4632      	mov	r2, r6
 8005e64:	4649      	mov	r1, r9
 8005e66:	4640      	mov	r0, r8
 8005e68:	47d0      	blx	sl
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d0ad      	beq.n	8005dca <_printf_i+0x15a>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	079b      	lsls	r3, r3, #30
 8005e72:	d413      	bmi.n	8005e9c <_printf_i+0x22c>
 8005e74:	68e0      	ldr	r0, [r4, #12]
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	bfb8      	it	lt
 8005e7c:	4618      	movlt	r0, r3
 8005e7e:	e7a6      	b.n	8005dce <_printf_i+0x15e>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4632      	mov	r2, r6
 8005e84:	4649      	mov	r1, r9
 8005e86:	4640      	mov	r0, r8
 8005e88:	47d0      	blx	sl
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d09d      	beq.n	8005dca <_printf_i+0x15a>
 8005e8e:	3501      	adds	r5, #1
 8005e90:	68e3      	ldr	r3, [r4, #12]
 8005e92:	9903      	ldr	r1, [sp, #12]
 8005e94:	1a5b      	subs	r3, r3, r1
 8005e96:	42ab      	cmp	r3, r5
 8005e98:	dcf2      	bgt.n	8005e80 <_printf_i+0x210>
 8005e9a:	e7eb      	b.n	8005e74 <_printf_i+0x204>
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	f104 0619 	add.w	r6, r4, #25
 8005ea2:	e7f5      	b.n	8005e90 <_printf_i+0x220>
 8005ea4:	080061c2 	.word	0x080061c2
 8005ea8:	080061d3 	.word	0x080061d3

08005eac <memmove>:
 8005eac:	4288      	cmp	r0, r1
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	eb01 0402 	add.w	r4, r1, r2
 8005eb4:	d902      	bls.n	8005ebc <memmove+0x10>
 8005eb6:	4284      	cmp	r4, r0
 8005eb8:	4623      	mov	r3, r4
 8005eba:	d807      	bhi.n	8005ecc <memmove+0x20>
 8005ebc:	1e43      	subs	r3, r0, #1
 8005ebe:	42a1      	cmp	r1, r4
 8005ec0:	d008      	beq.n	8005ed4 <memmove+0x28>
 8005ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eca:	e7f8      	b.n	8005ebe <memmove+0x12>
 8005ecc:	4402      	add	r2, r0
 8005ece:	4601      	mov	r1, r0
 8005ed0:	428a      	cmp	r2, r1
 8005ed2:	d100      	bne.n	8005ed6 <memmove+0x2a>
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ede:	e7f7      	b.n	8005ed0 <memmove+0x24>

08005ee0 <_sbrk_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d06      	ldr	r5, [pc, #24]	@ (8005efc <_sbrk_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fb fbf2 	bl	80016d4 <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_sbrk_r+0x1a>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_sbrk_r+0x1a>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	2000084c 	.word	0x2000084c

08005f00 <memcpy>:
 8005f00:	440a      	add	r2, r1
 8005f02:	4291      	cmp	r1, r2
 8005f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f08:	d100      	bne.n	8005f0c <memcpy+0xc>
 8005f0a:	4770      	bx	lr
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f16:	4291      	cmp	r1, r2
 8005f18:	d1f9      	bne.n	8005f0e <memcpy+0xe>
 8005f1a:	bd10      	pop	{r4, pc}

08005f1c <_realloc_r>:
 8005f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	4607      	mov	r7, r0
 8005f22:	4614      	mov	r4, r2
 8005f24:	460d      	mov	r5, r1
 8005f26:	b921      	cbnz	r1, 8005f32 <_realloc_r+0x16>
 8005f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	f7ff bc4d 	b.w	80057cc <_malloc_r>
 8005f32:	b92a      	cbnz	r2, 8005f40 <_realloc_r+0x24>
 8005f34:	f7ff fbde 	bl	80056f4 <_free_r>
 8005f38:	4625      	mov	r5, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	f000 f81a 	bl	8005f78 <_malloc_usable_size_r>
 8005f44:	4284      	cmp	r4, r0
 8005f46:	4606      	mov	r6, r0
 8005f48:	d802      	bhi.n	8005f50 <_realloc_r+0x34>
 8005f4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f4e:	d8f4      	bhi.n	8005f3a <_realloc_r+0x1e>
 8005f50:	4621      	mov	r1, r4
 8005f52:	4638      	mov	r0, r7
 8005f54:	f7ff fc3a 	bl	80057cc <_malloc_r>
 8005f58:	4680      	mov	r8, r0
 8005f5a:	b908      	cbnz	r0, 8005f60 <_realloc_r+0x44>
 8005f5c:	4645      	mov	r5, r8
 8005f5e:	e7ec      	b.n	8005f3a <_realloc_r+0x1e>
 8005f60:	42b4      	cmp	r4, r6
 8005f62:	4622      	mov	r2, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	bf28      	it	cs
 8005f68:	4632      	movcs	r2, r6
 8005f6a:	f7ff ffc9 	bl	8005f00 <memcpy>
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4638      	mov	r0, r7
 8005f72:	f7ff fbbf 	bl	80056f4 <_free_r>
 8005f76:	e7f1      	b.n	8005f5c <_realloc_r+0x40>

08005f78 <_malloc_usable_size_r>:
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f18      	subs	r0, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfbc      	itt	lt
 8005f82:	580b      	ldrlt	r3, [r1, r0]
 8005f84:	18c0      	addlt	r0, r0, r3
 8005f86:	4770      	bx	lr

08005f88 <_init>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr

08005f94 <_fini>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr
